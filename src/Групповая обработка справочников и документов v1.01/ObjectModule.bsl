
#Область Серверные_переменные

Перем ВерсияОбработки Экспорт;	// Тип: Строка

#КонецОбласти


#Область Регистрация_внешней_обработки

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки".
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если Истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = Новый Структура();

	ПараметрыРегистрации.Вставить("Вид",					"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение",				Новый Массив()); // Для глобальных обработок не используется.
	ПараметрыРегистрации.Вставить("Наименование",			"Групповая обработка справочников и документов");
	ПараметрыРегистрации.Вставить("Версия",					"3.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим",		Ложь);
	ПараметрыРегистрации.Вставить("Информация",				"Групповая обработка справочников и документов");

	РеквизитыТабличнойЧастиСправочника = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;

	ТаблицаКоманд = Новый ТаблицаЗначений();
	ТаблицаКоманд.Колонки.Добавить("Представление",			РеквизитыТабличнойЧастиСправочника.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор",			РеквизитыТабличнойЧастиСправочника.Идентификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Использование",			Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение",	РеквизитыТабличнойЧастиСправочника.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить("Модификатор",			РеквизитыТабличнойЧастиСправочника.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Скрыть",				РеквизитыТабличнойЧастиСправочника.Скрыть.Тип);	

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление								= "Групповая обработка справочников и документов";
	НоваяКоманда.Идентификатор								= "ВыполнитьКоманду";
	НоваяКоманда.Использование								= "ОткрытиеФормы";
	НоваяКоманда.ПоказыватьОповещение						= Истина;
	НоваяКоманда.Модификатор								= "";
	НоваяКоманда.Скрыть										= Ложь;

	ПараметрыРегистрации.Вставить("Команды",				ТаблицаКоманд);

	ПараметрыРегистрации.Вставить("ВерсияБСП",				"1.2.1.4");
	ПараметрыРегистрации.Вставить("Разрешения",				Новый Массив());

	Возврат ПараметрыРегистрации;

КонецФункции

// Возвращает имя внешней обработки.
//
Функция ПолучитьИмяВнешнейОбработки() Экспорт

	Возврат ЭтотОбъект.Метаданные().Имя;

КонецФункции

// Сохраняет обработку в справочнике <Дополнительные отчеты и обработки>
// для запуска процесса обработки данных в фоновом режиме и отображения
// индикатора в управляемом приложении.
//
Процедура СохранитьОбработкуВСправочникеДополнительныеОтчетыИОбработки(ДвоичныеДанные) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	СведенияДляРегистрации = СведенияОВнешнейОбработке();

	ИмяОбъекта = СтрЗаменить(Строка(ЭтотОбъект), "ВнешняяОбработкаОбъект.", "");

	// Ищем обработку текущей версии среди существующих.
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеОтчетыИОбработки.Ссылка	  КАК ВнешняяОбработка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяОбъекта",		 ИмяОбъекта);
	Запрос.УстановитьПараметр("ВерсияОбработки", СведенияДляРегистрации.Версия);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		// Найденную обработку перезаписываем, чтобы избежать конфликтов при обработке данных в фоновом режиме.
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВнешняяОбработка = Выборка.ВнешняяОбработка.ПолучитьОбъект();
		ВнешняяОбработка.ПометкаУдаления = Ложь; // У обработки помеченной на удаление, снимаем пометку.

		// Обработка была загружена ранее и пользователь мог ее перенастроить.
		// Оставляем эту информацию.
		ЗарегистрироватьОбработку = Истина;

	Иначе
		
		// Создаем новый элемент.
		ВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();

		// Необходимо выполнить регистрацию обработки в разделе <Администрирование>
		// и настроить быстрый доступ для текущего пользователя.
		ЗарегистрироватьОбработку = Истина;

	КонецЕсли;

	ТекущийПользователь = ОпределитьТекущегоПользователя();

	ВариантыЗапускаОбработки = Новый Массив();
	ВариантыЗапускаОбработки.Добавить(Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы);

	ЗаполнитьЗначенияСвойств(ВнешняяОбработка, СведенияДляРегистрации);
	ВнешняяОбработка.Команды.Загрузить(СведенияДляРегистрации.Команды);
	ВнешняяОбработка.Команды.ЗагрузитьКолонку(ВариантыЗапускаОбработки, "ВариантЗапуска");

	ВнешняяОбработка.Вид						 = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ВнешняяОбработка.ИмяФайла					 = ПолучитьИмяВнешнейОбработки();
	ВнешняяОбработка.ИмяОбъекта					 = ИмяОбъекта;
	ВнешняяОбработка.БезопасныйРежим			 = Ложь;
	ВнешняяОбработка.ИспользоватьДляФормыОбъекта = Истина;
	ВнешняяОбработка.ИспользоватьДляФормыСписка	 = Истина;
	ВнешняяОбработка.Публикация					 = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	ВнешняяОбработка.Ответственный				 = ТекущийПользователь;

	// Отключаем безопасный режим.
	Если КорректноеИмяМетаданных("Справочник.ДополнительныеОтчетыИОбработки.РежимСовместимостиРазрешений") Тогда
		 ВнешняяОбработка.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
	КонецЕсли;

	Если ЗарегистрироватьОбработку
	   И КорректноеИмяМетаданных("Справочник.ИдентификаторыОбъектовМетаданных") Тогда

		// Размещаем в разделе <Администрирование>.
		НовыйРаздел = ВнешняяОбработка.Разделы.Добавить();
		РазделАдминистрирование = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Администрирование");
		Если НЕ ПустаяСтрока(РазделАдминистрирование) Тогда
			НовыйРаздел.Раздел = РазделАдминистрирование;
		КонецЕсли;

	КонецЕсли;

	// Помещаем обработку в хранилище.
	ВнешняяОбработка.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанные);

	ВнешняяОбработка.Записать();

	// Быстрый доступ к обоработке из раздела <Администрирование>
	// для текущего пользователя.
	Если ЗарегистрироватьОбработку
	   И КорректноеИмяМетаданных("РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам")
	И НЕ ПустаяСтрока(ТекущийПользователь) Тогда

		НоваяЗапись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();

		НоваяЗапись.ДополнительныйОтчетИлиОбработка = ВнешняяОбработка.Ссылка;
		НоваяЗапись.ИдентификаторКоманды = ИмяОбъекта;
		НоваяЗапись.Пользователь		 = ТекущийПользователь;
		НоваяЗапись.Доступно			 = Истина;

		НоваяЗапись.Записать();

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // СохранитьОбработкуВСправочникеДополнительныеОтчетыИОбработки()

#КонецОбласти


#Область Запуск_фонового_задания

// Обработка данных в фоновом (асинхронном) режиме.
//
// Параметры:
//	ИдентификаторФоновогоЗадания - тип: УникальныйИдентификатор.
//
// Возвращаемое значение:
//	СозданоФоновоеЗадание - тип: Булево.
//
Функция ЗапуститьОбработкуВФоновомРежиме(ИдентификаторФоновогоЗадания) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	СведенияДляРегистрации = СведенияОВнешнейОбработке();

	СозданоФоновоеЗадание = Ложь;
	
	ИмяОбъекта = СтрЗаменить(Строка(ЭтотОбъект), "ВнешняяОбработкаОбъект.", "");

	// Отключаем предыдущие версии обработки.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка		КАК ВнешняяОбработка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки	КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта
	|	И ДополнительныеОтчетыИОбработки.Версия = &ВерсияОбработки";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяОбъекта",		 ИмяОбъекта);
	Запрос.УстановитьПараметр("ВерсияОбработки", СведенияДляРегистрации.Версия);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(Выборка.ВнешняяОбработка);
		ПараметрыЗадания.Добавить("ВыполнитьКоманду");

		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуПоРегламентномуЗаданию", ПараметрыЗадания, ИдентификаторФоновогоЗадания);

		СозданоФоновоеЗадание = (ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно);

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат СозданоФоновоеЗадание;

КонецФункции

#КонецОбласти


#Область Экспортная_процедура_ВыполнитьКоманду

// Выполняет команду обработки данных через вызов экспортной процедуры 
// "ВыполнитьОбработкуПоРегламентномуЗаданию()" общего модуля
// "ДополнительныеОтчетыИОбработки". БСП версии не ниже 2.2.
//
// Обязательные параметры (необходимы для корректного вызова команды):
//	ОсновныеПараметрыКоманды		- тип: Структура или Неопределено
//	ДополнительныеПараметрыКоманды	- не используется
//
Процедура ВыполнитьКоманду(ОсновныеПараметрыКоманды = Неопределено, ДополнительныеПараметрыКоманды = Неопределено) Экспорт

	// Восстанавливаем контекст внешней обработки.
	// Ключ настроек указываем явно, т.к. вызов процедуры производится из фонового задания.
	ХранилищеЗначенийНастроек = ХранилищеОбщихНастроек.Загрузить("f0ca0412-1981-0808-2016-008124580333", "КонтекстВнешнейОбработки");
	КонтекстВнешнейОбработки  = ХранилищеЗначенийНастроек.Получить(); // тип: Структура

	Если НЕ ТипЗнч(КонтекстВнешнейОбработки) = Тип("Структура") Тогда
		ДобавитьОшибкуВЖурналРегистрации("КонтекстВнешнейОбработки", "Ошибка получения контекста внешней обработки <Групповая обработка справочников и документов>");
		Возврат;
	КонецЕсли;
	
	// Основной режим запуска обработки - через фоновое задание.
	ФоновыйРежим = Истина;
	Если ТипЗнч(ОсновныеПараметрыКоманды) = Тип("Структура")
	   И ОсновныеПараметрыКоманды.Свойство("ФоновыйРежим") Тогда
		ФоновыйРежим = ОсновныеПараметрыКоманды["ФоновыйРежим"];
	КонецЕсли;
	
	ВыполнитьОбработкуДанных(КонтекстВнешнейОбработки, ФоновыйРежим);
	
КонецПроцедуры

#КонецОбласти


#Область Обработка_данных

// Универсальная обработка данных.
//
// Параметры:
//	КонтекстВнешнейОбработки - тип: Структура
//
Процедура ВыполнитьОбработкуДанных(КонтекстВнешнейОбработки, ФоновыйРежим = Истина) Экспорт
	
	// Восстанавливаем контекст внешней обработки.
	
	ОбрабатыватьТабличныеЧасти = Ложь;
	Если КонтекстВнешнейОбработки.Свойство("ОбрабатыватьТабличныеЧасти") Тогда
		ОбрабатыватьТабличныеЧасти = КонтекстВнешнейОбработки["ОбрабатыватьТабличныеЧасти"];
	КонецЕсли;
	
	ВыбранноеДействие = "";
	Если КонтекстВнешнейОбработки.Свойство("ВыбранноеДействие") Тогда
		ВыбранноеДействие = КонтекстВнешнейОбработки["ВыбранноеДействие"];
	КонецЕсли;
	
	НовоеЗначение = Неопределено;
	Если КонтекстВнешнейОбработки.Свойство("НовоеЗначение") Тогда
		НовоеЗначение = КонтекстВнешнейОбработки["НовоеЗначение"];
	КонецЕсли;
	
	ВыполнятьВТранзакции = Ложь;
	Если КонтекстВнешнейОбработки.Свойство("ВыполнятьВТранзакции") Тогда
		ВыполнятьВТранзакции = КонтекстВнешнейОбработки["ВыполнятьВТранзакции"];
	КонецЕсли;
	
	ВыполнятьВРежимеЗагрузки = Ложь;
	Если КонтекстВнешнейОбработки.Свойство("ВыполнятьВРежимеЗагрузки") Тогда
		ВыполнятьВРежимеЗагрузки = КонтекстВнешнейОбработки["ВыполнятьВРежимеЗагрузки"];
	КонецЕсли;
	
	НеПрерыватьВыполнениеПриОшибке = Ложь;
	Если КонтекстВнешнейОбработки.Свойство("НеПрерыватьВыполнениеПриОшибке") Тогда
		НеПрерыватьВыполнениеПриОшибке = КонтекстВнешнейОбработки["НеПрерыватьВыполнениеПриОшибке"];
	КонецЕсли;
	
	ТаблицаОтборов = Новый ТаблицаЗначений();
	Если КонтекстВнешнейОбработки.Свойство("ТаблицаОтборов") Тогда
		ТаблицаОтборов = КонтекстВнешнейОбработки["ТаблицаОтборов"];
	КонецЕсли;
		
	ТаблицаИзменяемыхРеквизитов = Новый ТаблицаЗначений();
	Если КонтекстВнешнейОбработки.Свойство("ТаблицаИзменяемыхРеквизитов") Тогда
		ТаблицаИзменяемыхРеквизитов = КонтекстВнешнейОбработки["ТаблицаИзменяемыхРеквизитов"];
	КонецЕсли;
	
	ТекущийОбъектМетаданных = Новый Массив();
	Если КонтекстВнешнейОбработки.Свойство("ТекущийОбъектМетаданных") Тогда
		ТекущийОбъектМетаданных = КонтекстВнешнейОбработки["ТекущийОбъектМетаданных"];
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();	
	КонецЕсли;
	
	ИндикаторПроцессаОбработкиДанных = 1;
	
	Индикатор = 1; // Время затраченное на запуск фонового задания.
	Если ФоновыйРежим Тогда // В фоновом режиме передаем сообщения.
		СообщитьПользователю(Строка(Индикатор)); // Сразу двигаем индикатор.
	КонецЕсли;
	
	ДиапазонОбновленияИндикатора = Окр(100/ТаблицаОтборов.Количество(), 4);
	
	Для Каждого ОтобранныйЭлемент Из ТаблицаОтборов Цикл
		
		Если ОтобранныйЭлемент.Использовать Тогда
			
			ОбрабатываемыйОбъект = ОтобранныйЭлемент.Ссылка.ПолучитьОбъект();
			ОтобранныйЭлемент.ОбработанУспешно = "Да";
			
			Если ВыполнятьВРежимеЗагрузки Тогда
				ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Попытка
				
				ВыполнитьДействие(ОбрабатываемыйОбъект, ОтобранныйЭлемент, ВыбранноеДействие, НовоеЗначение, ОбрабатыватьТабличныеЧасти, ТаблицаИзменяемыхРеквизитов, ТекущийОбъектМетаданных);
				
			Исключение
				
				ИндикаторПроцессаОбработкиДанных = 100; // Принудительная установка, чтобы остановилось фоновое задание.
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
			 	ОтобранныйЭлемент.ОбработанУспешно = "Нет";
				
				ДобавитьОшибкуВЖурналРегистрации("Групповая обработка справочников и документов", "Ошибка обработки объекта <" + ОбрабатываемыйОбъект + ">");
				
				Если ВыполнятьВТранзакции
				 ИЛИ (НЕ ВыполнятьВТранзакции И НЕ НеПрерыватьВыполнениеПриОшибке) Тогда
					
					Прервать;
					
				КонецЕсли;
			
			КонецПопытки;
			
		Иначе
			
			ОтобранныйЭлемент.ОбработанУспешно = "НеОбрабатывался";
			
		КонецЕсли;
		
		Индикатор = Индикатор + ДиапазонОбновленияИндикатора;
		
		Если ФоновыйРежим Тогда // В фоновом режиме передаем сообщение.
			СообщитьПользователю(Строка(Индикатор)); // Двигаем индикатор на форме.
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполнятьВТранзакции И ТранзакцияАктивна() Тогда
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	ИндикаторПроцессаОбработкиДанных = 100; // Принудительная установка, чтобы остановилось фоновое задание.
	
КонецПроцедуры

// Выполняет действие.
Процедура ВыполнитьДействие(ОбрабатываемыйОбъект, ОтобранныйЭлемент, ВыбранноеДействие, НовоеЗначение, ОбрабатыватьТабличныеЧасти, ТаблицаИзменяемыхРеквизитов, ТекущийОбъектМетаданных)
	
	Если ВыбранноеДействие = "ИзменитьПометкаУдаления" Тогда
		
		ОбрабатываемыйОбъект.УстановитьПометкуУдаления(НовоеЗначение);
		
	ИначеЕсли ВыбранноеДействие = "ИзменитьПроведение" Тогда
		
		Если НовоеЗначение Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			
		Иначе
			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			
		КонецЕсли;
		
		ОбрабатываемыйОбъект.Записать(РежимЗаписи);
		
	ИначеЕсли ВыбранноеДействие = "ВыполнитьЗадачу" Тогда
		
		ОбрабатываемыйОбъект.ВыполнитьЗадачу(); 
		
	ИначеЕсли ВыбранноеДействие = "Старт" Тогда
		
		ИндексТочкаСтарта = НовоеЗначение;
		
		Если НЕ ИндексТочкаСтарта = Неопределено 
		   И СтрДлина(ИндексТочкаСтарта) > 0 Тогда
			
			КартаМ = ОбрабатываемыйОбъект.ПолучитьКартуМаршрута();
			ТочкаМ = КартаМ.ЭлементыГрафическойСхемы.Получить(Число(ИндексТочкаСтарта));
			
		КонецЕсли;
		
		Если ИндексТочкаСтарта = Неопределено Тогда
			
			ОбрабатываемыйОбъект.Старт(); 
			
		Иначе 
			
			ОбрабатываемыйОбъект.Старт(ТочкаМ);
			
		КонецЕсли;
		
	ИначеЕсли ВыбранноеДействие = "ИзменитьРеквизиты" Тогда

		ИзменитьРеквизиты(ОбрабатываемыйОбъект, ОтобранныйЭлемент, ТаблицаИзменяемыхРеквизитов, ОбрабатыватьТабличныеЧасти);
		
	Иначе
		
		ИзменитьРеквизит(ОбрабатываемыйОбъект, ОтобранныйЭлемент, ТекущийОбъектМетаданных, НовоеЗначение, ВыбранноеДействие, ОбрабатыватьТабличныеЧасти);
		
	КонецЕсли;
		
КонецПроцедуры

// Изменяет реквизиты.
//
Процедура ИзменитьРеквизиты(ОбрабатываемыйОбъект, ОтобранныйЭлемент, ТаблицаИзменяемыхРеквизитов, ОбрабатыватьТабличныеЧасти)
	
	СтруктураЗаполнения = Новый Структура();
	
	Для Каждого ИзменяемыйРеквизит Из ТаблицаИзменяемыхРеквизитов Цикл
		
		СтруктураЗаполнения.Вставить(ИзменяемыйРеквизит.ИмяРеквизита, ИзменяемыйРеквизит.НовоеЗначение);
		
	КонецЦикла;
	
	Если ОбрабатыватьТабличныеЧасти = Ложь Тогда
		
		ЗаполнитьЗначенияСвойств(ОбрабатываемыйОбъект, СтруктураЗаполнения);
		
	Иначе 
		
		НужнаяСтрока = ОбрабатываемыйОбъект[ОтобранныйЭлемент.ИмяТЧ].Получить(ОтобранныйЭлемент.НомерСтроки - 1);
		ЗаполнитьЗначенияСвойств(НужнаяСтрока, СтруктураЗаполнения);
			
	КонецЕсли;
	
	ОбрабатываемыйОбъект.Записать(); 
	
КонецПроцедуры

// Изменяет текущий реквизит.
//
Процедура ИзменитьРеквизит(ОбрабатываемыйОбъект, ОтобранныйЭлемент, ТекущийОбъектМетаданных, НовоеЗначение, ВыбранноеДействие, ОбрабатыватьТабличныеЧасти)
	
	Если ТекущийОбъектМетаданных.Количество() > 0 Тогда
		
		ТекущийОбъектМетаданных = ТекущийОбъектМетаданных.Получить(0);
		
		Если ОбрабатыватьТабличныеЧасти = Ложь Тогда
			
			ОбрабатываемыйОбъект[ВыбранноеДействие] = НовоеЗначение;
			
		Иначе
			
			НужнаяСтрока = ОбрабатываемыйОбъект[ОтобранныйЭлемент.ИмяТЧ].Получить(ОтобранныйЭлемент.НомерСтроки - 1);
			НужнаяСтрока[ВыбранноеДействие] = НовоеЗначение;
			
		КонецЕсли;
		
		ОбрабатываемыйОбъект.Записать(); 
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти


#Область Дополнительные_процедуры_и_функции

// Проверяет корректность имен метаданных.
//
// Параметры:
//	ПутьКМетаданным - тип: Строка
//
// Возвращаемое значение:
//	тип: Булево
//
Функция КорректноеИмяМетаданных(ПутьКМетаданным) Экспорт

	МассивДанных = РазложитьСтрокуВМассивПодстрок(ПутьКМетаданным, ".");

	ВремПеремен = Неопределено;

	Если ТипЗнч(МассивДанных) = Тип("Массив")
	   И МассивДанных.Количество() > 0 Тогда

		Элемент = МассивДанных[0];
		МассивДанных.Удалить(0);

		Элемент = ?(ТипЗнч(Элемент) = Тип("Строка"), ВРег(СокрЛП(Элемент)), Элемент);

		// Документы
		Если Элемент = ВРег("Документы") ИЛИ Элемент = ВРег("Документ") Тогда

			ВремПеремен = Метаданные.Документы; // КоллекцияОбъектовМетаданных

			Если МассивДанных.Количество() = 0 Тогда
				Возврат Истина; // Проверяются метаданные "Документы".
			Иначе
				ВремПеремен = ВремПеремен.Найти(МассивДанных[0]);
				МассивДанных.Удалить(0);
			КонецЕсли;

			Если НЕ ТипЗнч(ВремПеремен) = Тип("ОбъектМетаданных") Тогда

				Возврат Ложь; // Искомый документ не найден (переименован).

			Иначе

				Если МассивДанных.Количество() = 0 Тогда

					Возврат Истина; // Искомый документ найден.

				Иначе

					Элемент = МассивДанных[0];
					МассивДанных.Удалить(0);

					Элемент = ?(ТипЗнч(Элемент) = Тип("Строка"), ВРег(СокрЛП(Элемент)), Элемент);

					// Может быть это "Стандартный реквизит" документа?
					Для Каждого СтандартныйРеквизит Из ВремПеремен.СтандартныеРеквизиты Цикл

						Если Элемент = ВРег(СтандартныйРеквизит.Имя) Тогда
							Возврат Истина; // Найден стандартный реквизит.
						КонецЕсли;

					КонецЦикла;

					// Может быть это произвольный "Реквизит" документа?
					Для Каждого СтандартныйРеквизит Из ВремПеремен.Реквизиты Цикл

						Если Элемент = ВРег(СтандартныйРеквизит.Имя) Тогда
							Возврат Истина; // Найден реквизит.
						КонецЕсли;

					КонецЦикла;

					// Может быть это "Табличная часть" документа?
					Для Каждого ТаблЧасть Из ВремПеремен.ТабличныеЧасти Цикл

						Если Элемент = ВРег(ТаблЧасть.Имя) Тогда

							ВремПеремен = ТаблЧасть;

							Если МассивДанных.Количество() = 0 Тогда

								Возврат Истина; // Искомая табличная часть найдена.

							Иначе

								Элемент = МассивДанных[0];
								МассивДанных.Удалить(0);

								Элемент = ?(ТипЗнч(Элемент) = Тип("Строка"), ВРег(СокрЛП(Элемент)), Элемент);

								// Может быть это "Стандартные реквизиты" табличной части.
								Для Каждого РеквизитТаблЧасти Из ВремПеремен.СтандартныеРеквизиты Цикл

									Если Элемент = ВРег(РеквизитТаблЧасти.Имя) Тогда
										Возврат Истина; // Найден стандартный реквизит.
									КонецЕсли;

								КонецЦикла;

								// Может быть это произвольные "Реквизиты" табличной части.
								Для Каждого РеквизитТаблЧасти Из ВремПеремен.Реквизиты Цикл

									Если Элемент = ВРег(РеквизитТаблЧасти.Имя) Тогда
										Возврат Истина; // Найден реквизит.
									КонецЕсли;

								КонецЦикла;

							КонецЕсли;

						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		// Справочники
		ИначеЕсли Элемент = ВРег("Справочники") ИЛИ Элемент = ВРег("Справочник") Тогда

			ВремПеремен = Метаданные.Справочники;

			Если МассивДанных.Количество() = 0 Тогда
				Возврат Истина; // Проверяются метаданных "Справочники".
			Иначе
				ВремПеремен = ВремПеремен.Найти(МассивДанных[0]);
				МассивДанных.Удалить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ВремПеремен) = Тип("ОбъектМетаданных") Тогда

				Возврат Ложь; // Искомый справочник не найден (переименован).

			Иначе

				Если МассивДанных.Количество() = 0 Тогда

					Возврат Истина; // Искомый справочник найден.

				Иначе

					Элемент = МассивДанных[0];
					МассивДанных.Удалить(0);

					Элемент = ?(ТипЗнч(Элемент) = Тип("Строка"), ВРег(СокрЛП(Элемент)), Элемент);

					// Может быть это "Стандартный реквизит" справочника?
					Для Каждого СтандартныйРеквизит Из ВремПеремен.СтандартныеРеквизиты Цикл

						Если Элемент = ВРег(СтандартныйРеквизит.Имя) Тогда
							Возврат Истина; // Найден стандартный реквизит.
						КонецЕсли;

					КонецЦикла;

					// Может быть это произвольный "Реквизит" справочника?
					Для Каждого СтандартныйРеквизит Из ВремПеремен.Реквизиты Цикл

						Если Элемент = ВРег(СтандартныйРеквизит.Имя) Тогда
							Возврат Истина; // Найден реквизит.
						КонецЕсли;

					КонецЦикла;
					
					// Может быть это "Табличная часть" справочника?
					Для Каждого ТаблЧасть Из ВремПеремен.ТабличныеЧасти Цикл

						Если Элемент = ВРег(ТаблЧасть.Имя) Тогда

							ВремПеремен = ТаблЧасть;

							Если МассивДанных.Количество() = 0 Тогда

								Возврат Истина; // Искомая табличная часть найдена.

							Иначе

								Элемент = МассивДанных[0];
								МассивДанных.Удалить(0);

								Элемент = ?(ТипЗнч(Элемент) = Тип("Строка"), ВРег(СокрЛП(Элемент)), Элемент);

								// Может быть это "Стандартные реквизиты" табличной части.
								Для Каждого РеквизитТаблЧасти Из ВремПеремен.СтандартныеРеквизиты Цикл

									Если Элемент = ВРег(РеквизитТаблЧасти.Имя) Тогда
										Возврат Истина; // Найден стандартный реквизит.
									КонецЕсли;

								КонецЦикла;

								// Может быть это произвольные "Реквизиты" табличной части.
								Для Каждого РеквизитТаблЧасти Из ВремПеремен.Реквизиты Цикл

									Если Элемент = ВРег(РеквизитТаблЧасти.Имя) Тогда
										Возврат Истина; // Найден реквизит.
									КонецЕсли;

								КонецЦикла;

							КонецЕсли;

						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		// Перечисления
		ИначеЕсли Элемент = ВРег("Перечисления") ИЛИ Элемент = ВРег("Перечисление") Тогда

			ВремПеремен = Метаданные.Перечисления; // КоллекцияОбъектовМетаданных

			Если МассивДанных.Количество() = 0 Тогда
				Возврат Истина; // Проверяются метаданные "Перечисления".
			Иначе
				ВремПеремен = ВремПеремен.Найти(МассивДанных[0]);
				МассивДанных.Удалить(0);
			КонецЕсли;

			Если НЕ ТипЗнч(ВремПеремен) = Тип("ОбъектМетаданных") Тогда

				Возврат Ложь; // Искомое перечисление не найдено (переименован).

			Иначе

				Если МассивДанных.Количество() = 0 Тогда

					Возврат Истина; // Искомое перечисление найдено.

				Иначе

					Элемент = МассивДанных[0]; // Имя значения перечисления.
					МассивДанных.Удалить(0);

					ЗначенияПеречисления = ВремПеремен.ЗначенияПеречисления;

					Для Каждого Значение Из ЗначенияПеречисления Цикл

						Если ВРег(Элемент) = ВРег(Значение.Имя) Тогда
							Возврат Истина; // Искомый значение перечисления найдено.
						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		// Регистр Бухгалтерии
		ИначеЕсли Элемент = ВРег("РегистрБухгалтерии") Тогда

		// Регистр Сведений и Регистр Накопления
		ИначеЕсли Элемент = ВРег("РегистрСведений")
			  ИЛИ Элемент = ВРег("РегистрНакопления") Тогда

			Если Элемент = ВРег("РегистрСведений") Тогда
				ВремПеремен = Метаданные.РегистрыСведений; // КоллекцияОбъектовМетаданных
			Иначе
				ВремПеремен = Метаданные.РегистрыНакопления; // КоллекцияОбъектовМетаданных
			КонецЕсли;

			Если МассивДанных.Количество() = 0 Тогда
				Возврат Истина; // Проверяются метаданные "РегистрыСведений".
			Иначе
				ВремПеремен = ВремПеремен.Найти(МассивДанных[0]);
				МассивДанных.Удалить(0);
			КонецЕсли;

			Если НЕ ТипЗнч(ВремПеремен) = Тип("ОбъектМетаданных") Тогда

				Возврат Ложь; // Искомый регистр не найден (переименован).

			Иначе

				Если МассивДанных.Количество() = 0 Тогда

					Возврат Истина; // Искомый регистр найден.

				Иначе

					Элемент = МассивДанных[0];
					МассивДанных.Удалить(0);

					Элемент = ?(ТипЗнч(Элемент) = Тип("Строка"), ВРег(СокрЛП(Элемент)), Элемент);

					// Может быть это измерение регистра?
					Для Каждого Измерение Из ВремПеремен.Измерения Цикл

						Если Элемент = ВРег(Измерение.Имя) Тогда
							Возврат Истина; // Найдено измерение.
						КонецЕсли;

					КонецЦикла;

					// Может быть это ресурс регистра?
					Для Каждого Ресурс Из ВремПеремен.Ресурсы Цикл

						Если Элемент = ВРег(Ресурс.Имя) Тогда
							Возврат Истина; // Найден ресурс.
						КонецЕсли;

					КонецЦикла;

					// Может быть это реквизит регистра?
					Для Каждого Реквизит Из ВремПеремен.Реквизиты Цикл

						Если Элемент = ВРег(Реквизит.Имя) Тогда
							Возврат Истина; // Найден реквизит.
						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе

		Сообщить("Ошибка интерпретации метаданных!");

	КонецЕсли;

	Возврат Ложь;

КонецФункции // КорректноеИмяМетаданных()

// Возвращает текущего пользователя ИБ.
//
// Возвращаемое значение:
//	ТекущийПользователь - тип: Справочники.Пользователи
//
Функция ОпределитьТекущегоПользователя() Экспорт
	
	// Ищем параметр сеанса "ТекущийПользователь".
	Если НЕ Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь") = Неопределено Тогда
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
	Иначе
		
		// Используем пользователя информационной базы.
		ТекущийПользователь = ПользователиИнформационнойБазы.Текущийпользователь();
		
		Если ПустаяСтрока(ТекущийПользователь.Имя) Тогда
			ТекущийПользователь.Имя = "<Не авторизован>";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущийПользователь;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный разделитель.
// "Разделитель" может иметь любую длину.
//
// Если в качестве разделителя задан пробел, рядом стоящие пробелы 
// считаются одним разделителем, а ведущие и хвостовые пробелы параметра
// "ИсходнаяСтрока" игнорируются.
//
// Например,
//	РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
// три из которых - пустые строки, а
//	РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
// Параметры:
//	ИсходнаяСтрока - строка, которую необходимо разложить на подстроки.
//	Разделитель	   - строка-разделитель, по умолчанию - запятая.
//
// Возвращаемое значение:
//	Массив значений, элементы которого - подстроки.
//
Функция РазложитьСтрокуВМассивПодстрок(Знач ИсходнаяСтрока, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	
	Если Разделитель = " " Тогда
		
		ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
		
		Пока 1=1 Цикл
			
			ТекущаяПозиция = Найти(ИсходнаяСтрока, Разделитель);
			
			Если ТекущаяПозиция = 0 Тогда
				
				МассивСтрок.Добавить(ИсходнаяСтрока);
				Возврат МассивСтрок;
				
			КонецЕсли;
			
			МассивСтрок.Добавить(Лев(ИсходнаяСтрока,    ТекущаяПозиция - 1));
			ИсходнаяСтрока = СокрЛ(Сред(ИсходнаяСтрока, ТекущаяПозиция));
			
		КонецЦикла;
		
	Иначе
		
		ДлинаРазделителя = СтрДлина(Разделитель);
		
		Пока 1=1 Цикл
			
			ТекущаяПозиция = Найти(ИсходнаяСтрока, Разделитель);
			
			Если ТекущаяПозиция = 0 Тогда
				
				МассивСтрок.Добавить(ИсходнаяСтрока);
				Возврат МассивСтрок;
				
			КонецЕсли;
			
			МассивСтрок.Добавить(Лев(ИсходнаяСтрока, ТекущаяПозиция - 1));
			ИсходнаяСтрока = Сред(ИсходнаяСтрока,	 ТекущаяПозиция + ДлинаРазделителя);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // РазложитьСтрокуВМассивПодстрок()

// Для внутреннего использования.
//
// Параметры:
//	ИмяСобытия	- тип: Строка
//	Комментарий	- тип: Любой, приводимый к строке.
//
Процедура ДобавитьИнформациюВЖурналРегистрации(ИмяСобытия, Комментарий = Неопределено)

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,, Строка(Комментарий));  

КонецПроцедуры

// Для внутреннего использования.
//
// Параметры:
//	ИмяСобытия	- тип: Строка
//	Комментарий	- тип: Любой, приводимый к строке.
//
Процедура ДобавитьОшибкуВЖурналРегистрации(ИмяСобытия, Комментарий = Неопределено)

	ДанныеОбОшибке = ИнформацияОбОшибке();

	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ДанныеОбОшибке);
	КраткаяИнформация	= КраткоеПредставлениеОшибки(ДанныеОбОшибке);

	Если НЕ ПустаяСтрока(ПодробнаяИнформация) Тогда
		
		ИнформацияОбОшибке = ПодробнаяИнформация;
		
	ИначеЕсли НЕ ПустаяСтрока(КраткаяИнформация) Тогда
		
		ИнформацияОбОшибке = КраткаяИнформация;
		
	ИначеЕсли НЕ ПустаяСтрока(Комментарий) Тогда
		
		ИнформацияОбОшибке = Строка(Комментарий);
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ИнформацияОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть связано
// с элементом управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),, "ПолеВРеквизитеФормыОбъект", "Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),, "Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),, "ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",, Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"), Ссылка,,, Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(	Знач ТекстСообщенияПользователю,
								Знач КлючДанных = Неопределено,
								Знач Поле = "",
								Знач ПутьКДанным = "",
								Отказ = Ложь)

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле  = Поле;

	ЭтоОбъект = Ложь;

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда

	Если НЕ КлючДанных = Неопределено
	   И НЕ XMLТипЗнч(КлючДанных) = Неопределено Тогда

		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;

	КонецЕсли;

#КонецЕсли

	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	Сообщение.Сообщить();

	Отказ = Истина;

КонецПроцедуры

#КонецОбласти


#Область Инициализация_переменных

ВерсияОбработки = "v1.01 [08.08.2016]";

#КонецОбласти
