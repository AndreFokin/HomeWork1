
#Область Клиентские_переменные

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти


#Область Обработчики_событий

&НаСервере
// Обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Сбрасываем сохраненные настройки размеров и положения окна.
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Заголовок = Заголовок + " " + ОбъектНаСервере.ВерсияОбработки;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы);
	СерверныйИнтерфейс_ВосстановитьНастройки(Настройки);	
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриОткрытии.
//
Процедура ПриОткрытии(Отказ)
	
	Элементы.ИндикаторПроцессаОбработкиДанных.Видимость = Ложь;
	
	Если ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
		ПодготовитьДействие();
	КонецЕсли;
	
	Элементы.ДеревоТаблицГруппаСвернутьРазвернуть.Видимость = ОбрабатыватьТабличныеЧасти;
	
	УстановитьЗаголовокРезультатаОтбора();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля ТипОбъекта.
//
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ТаблицаВидыОбъектов.Очистить();
	ТаблицаРезультатаОтбора.Очистить();
	
	ВыбранноеДействие = "";
	
	СерверныйИнтерфейс_ПерезаполнитьДеревоТаблиц(ОбрабатыватьТабличныеЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Очистка поля ТипОбъекта.
//
Процедура ТипОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Блокируем действие.
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля Использовать элемента ДеревоТаблиц.
//
Процедура ДеревоТаблицИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанныеЭлемента = Элементы.ДеревоТаблиц.ТекущиеДанные;
	
	Если НЕ ТекущиеДанныеЭлемента = Неопределено Тогда
		
		РодительТекущего = ТекущиеДанныеЭлемента.ПолучитьРодителя();
			
		Если НЕ РодительТекущего = Неопределено Тогда
			
			Если ТекущиеДанныеЭлемента.Использовать = Истина Тогда
				
				РодительТекущего.Использовать = Истина;
				
			Иначе
				
				ОсталисьЗадействованные = Ложь;
				
				ЭлементыРодителя = РодительТекущего.ПолучитьЭлементы();
				
				Для Каждого ЭлементРодителя ИЗ ЭлементыРодителя Цикл
					
					Если ЭлементРодителя.Использовать = Истина Тогда
						
						ОсталисьЗадействованные  = Истина;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				РодительТекущего.Использовать = ОсталисьЗадействованные;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыТекущего = ТекущиеДанныеЭлемента.ПолучитьЭлементы();
		
		Если НЕ ЭлементыТекущего = Неопределено Тогда
			
			Для Каждого ЭлементТекущего Из ЭлементыТекущего Цикл
				
				ЭлементТекущего.Использовать = ТекущиеДанныеЭлемента.Использовать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаРезультатаОтбора.Очистить();
	
	СерверныйИнтерфейс_ПодготовитьСписокВыбранныхОбъектов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПослеУдаления поля ТаблицаВидыОбъектов.
//
Процедура ТаблицаВидыОбъектовПослеУдаления(Элемент)
	
	ТаблицаРезультатаОтбора.Очистить();
	
	СерверныйИнтерфейс_ДобавитьУдалитьРеквизиты();
	
	СерверныйИнтерфейс_ИнициализироватьСКД();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля ВыбранноеДействие.
//
Процедура ВыбранноеДействиеПриИзменении(Элемент)
	
	СерверныйИнтерфейс_УстановитьНовоеДействие();
	
	УстановитьВидимостьЭлементов();
	
	Если ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
		ПодготовитьДействие();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Подготавливается в выбранному действию.
//
// Параметры:
//	Нет
//
Процедура ПодготовитьДействие()
	
	СерверныйИнтерфейс_ПодготовитьПараметрыДопополнительныхРеквизитов();
	
	Если ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
				
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении флажка ОбрабатыватьТабличныеЧасти.
//
Процедура ОбрабатыватьТабличныеЧастиПриИзменении(Элемент)
	
	ТаблицаВидыОбъектов.Очистить();
	ТаблицаРезультатаОтбора.Очистить();
	
	СерверныйИнтерфейс_ПерезаполнитьДеревоТаблиц(ОбрабатыватьТабличныеЧасти);
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	Если ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
		ПодготовитьДействие();
	КонецЕсли;

	Элементы.ДеревоТаблицГруппаСвернутьРазвернуть.Видимость = ОбрабатыватьТабличныеЧасти;
	
КонецПроцедуры

&НаСервере
// Обработчик события ПриЗагрузкеДанныхНаСервере.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СерверныйИнтерфейс_ВосстановитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере
// Обработчик события ПриСохраненииДанныхНаСервере.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СерверныйИнтерфейс_ЗаполнитьНастройкиПриСохранении(Настройки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Выбор поля ТаблицаРеквизиты.
//
Процедура ТаблицаРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УстановитьОграничениеТипов(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПередНачаломИзменения поля ТаблицаРеквизиты.
//
Процедура ТаблицаРеквизитыПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьОграничениеТипов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизиты.ТекущиеДанные;
	  
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Изменять = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля ТаблицаРеквизитыНовоеЗначение.
//
Процедура ТаблицаРеквизитыНовоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизиты.ТекущиеДанные;
	
	УстановитьВидимостьКолонокПоДополнительнымРеквизитам(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
// Устанавливает видимость колонок.
//
Процедура УстановитьВидимостьКолонокПоДополнительнымРеквизитам(ТекущаяСтрока)
	
	ЭлементКолонка = Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти(ТекущаяСтрока.ИмяРеквизита); 
	
	Если НЕ ЭлементКолонка = Неопределено Тогда
		ЭлементКолонка.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события ПередУдалением поля ДеревоТаблиц.
//
Процедура ДеревоТаблицПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриЗакрытии.
//
Процедура ПриЗакрытии()
	
	СерверныйИнтерфейс_СохранитьДанныеВНастройках();
	
КонецПроцедуры

#КонецОбласти


#Область Обработчики_команд

&НаКлиенте
// Обработчик команды ВидимостьКолонок.
//
Процедура ВидимостьКолонок(Команда)
	
	СписокЭлементов = Новый СписокЗначений;
	
	Для Каждого ЭлементУправления Из Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы Цикл
		
		Если  ЭлементУправления.Имя <> "Ссылка" 
			И ЭлементУправления.Имя <> "НомерСтроки"
			И ЭлементУправления.Имя <> "ИмяТЧ" Тогда
			
			СписокЭлементов.Добавить(ЭлементУправления.Имя, ЭлементУправления.Заголовок, ЭлементУправления.Видимость);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяФормыРедактирования = "ВнешняяОбработка.ГрупповаяОбработкаСправочниковИДокументов.Форма.ФормаВидимостьКолонок";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТаблицаКолонок", СписокЭлементов);
	
	ОткрытьФорму(ИмяФормыРедактирования, ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗавершениеРедактированияВидимостиКолонок", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Завершение редактирования видимости колонок.
//
Процедура ЗавершениеРедактированияВидимостиКолонок(РезультатНастройки, ДополнительныеПараметры) Экспорт

	Если НЕ РезультатНастройки = Неопределено Тогда
		
		Для Каждого ЭлементСписка Из РезультатНастройки Цикл
			
			КолонкаИзменятьВидимость = Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти(ЭлементСписка.Значение);
			
			Если НЕ КолонкаИзменятьВидимость = Неопределено Тогда
				КолонкаИзменятьВидимость.Видимость = ЭлементСписка.Пометка;
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого КолонкаТаблицыФормы Из Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы Цикл
		
		Если КолонкаТаблицыФормы.Видимость = Истина Тогда
			
			Если КэшВидимыхКолонок.НайтиПоЗначению(КолонкаТаблицыФормы.Имя) = Неопределено Тогда
				КэшВидимыхКолонок.Добавить(КолонкаТаблицыФормы.Имя);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды Отобрать.
//
Процедура Отобрать(Команда)
		
	Для Каждого КолонкаТаблицыФормы Из Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы Цикл
		
		Если КолонкаТаблицыФормы.Видимость = Истина Тогда
			
			Если КэшВидимыхКолонок.НайтиПоЗначению(КолонкаТаблицыФормы.Имя) = Неопределено Тогда
				
				КэшВидимыхКолонок.Добавить(КолонкаТаблицыФормы.Имя);
			  
		  	КонецЕсли;	
		  
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаВидыОбъектов.Количество() > 0 Тогда
		
		СерверныйИнтерфейс_ОтобратьОбъекты();
		
	Иначе
		
		ПоказатьПредупреждение(, "Не указаны объекты для отбора", 5*60);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	СерверныйИнтерфейс_ОчиститьУсловноеОформление();
	
	УстановитьЗаголовокРезультатаОтбора();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды ВыполнитьДействие.
//
Процедура ВыполнитьДействие(Команда)
	
	Объект.ИндикаторПроцессаОбработкиДанных = 0;
	
	Если ТаблицаРезультатаОтбора.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не заполнена таблица ""Результат отбора""", 5*60);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ВыбранноеДействие) Тогда
		ПоказатьПредупреждение(, "Выберите действие!", 5*60);
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти("НовоеЗначение") = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите действие!", 5*60);
		Возврат;
	ИначеЕсли ПустаяСтрока(ЭтаФорма["НовоеЗначение"]) Тогда
		ПоказатьПредупреждение(, "Выберите новое значение!", 5*60);
		Возврат;
	КонецЕсли;
	
	// Сохраняем контекст обработки перед переходом на сервер.
	СерверныйИнтерфейс_СохранитьКонтекстВнешнейОбработки();
	
	Элементы.ИндикаторПроцессаОбработкиДанных.Видимость = Ложь;
	
	ОбработкаЗапущенаВФоновомРежиме = Ложь;
	
	Попытка
		
		// Условия запуска обработки в фоновом режиме:
		// 1) В конфигурации включена функциональная опция "Использовать доп. отчеты и обработки".
		// 2) Используется платформа 8.3 и выше в управляемом приложении.
		// 3) Используется БСП версии 2.2 и выше с общим модулем "ДополнительныеОтчетыИОбработки" и
		//	  типовой экспортной процедурой "ВыполнитьОбработкуПоРегламентномуЗаданию()".
		// 4) В конфигурации присутствует справочник "ДополнительныеОтчетыИОбработки", в который
		//	  будет записана текущая обработка для последующего запуска ее в фоновом режиме.
		
		// 1) Попытка включить функциональную опцию, если она отключена.
		СерверныйИнтерфейс_ВключитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки");
		
		// 2) Сохраняем обработку в информационной базе.
		ДвоичныеДанные = Новый ДвоичныеДанные(СерверныйИнтерфейс_ПолучитьИмяФайлаОбработки());
		СерверныйИнтерфейс_СохранитьОбработкуВИнформационнойБазе(ДвоичныеДанные);
		
		// 3) Запускаем фоновое задание.
		ИдентификаторФоновогоЗадания = Новый УникальныйИдентификатор();
		Если СерверныйИнтерфейс_ЗапуститьОбработкуВФоновомРежиме(ИдентификаторФоновогоЗадания) Тогда;
			
			// В фоновом задании вызывается процедура модуля объекта "ВыполнитьКоманду()".
			
			// 4) Подключаем обработчик ожидания.
			ПодключитьОбработчикОжидания("ОжиданиеПроцессаОбработкиДанных", 1, Ложь);
			
			ОбработкаЗапущенаВФоновомРежиме = Истина;
			
		КонецЕсли;
		
	Исключение
		
		ДобавитьОшибкуВЖурналРегистрации("ЗапуститьОбработкуВФоновомРежиме()", "Ошибка запуска обработки <Групповая обработка справочников и документов> в фоновом режиме");
		
	КонецПопытки;
	
	Если ОбработкаЗапущенаВФоновомРежиме Тогда
		
		Элементы.ИндикаторПроцессаОбработкиДанных.Видимость = Истина;
		
	Иначе
		
		// При ошибке запуска обработки в асинхронном режиме выполняем в синхронном режиме.
		
		Состояние("Выполняется: " + ВыбранноеДействие);
		
		СерверныйИнтерфейс_ВыполнитьОбработкуДанных();
		
		СерверныйИнтерфейс_ОбновитьПослеВыполнения();
		
		Состояние("Выполнено: " + ВыбранноеДействие);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды УстановитьФлажки.
//
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды СнятьФлажки.
//
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаСервере
// Устанавливает/снимает флажки в Таблице отборов.
//
Процедура УстановитьСнятьФлажки(Значение)
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатаОтбора Цикл
		СтрокаТаблицы.Использовать = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды ОткрытьНастройки.
//
Процедура ОткрытьНастройки(Команда)
	
	ИмяФормыНастроек = "ВнешняяОбработка.ГрупповаяОбработкаСправочниковИДокументов.Форма.ФормаНастройки";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВыполнятьВТранзакции",			  Объект.ВыполнятьВТранзакции);
	ПараметрыФормы.Вставить("ВыполнятьВРежимеЗагрузки",		  Объект.ВыполнятьВРежимеЗагрузки);
	ПараметрыФормы.Вставить("НеПрерыватьВыполнениеПриОшибке", Объект.НеПрерыватьВыполнениеПриОшибке);
	
	ОткрытьФорму(ИмяФормыНастроек, ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗавершениеРедактированияНастроек", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Завершение редактирования настроек.
//
Процедура ЗавершениеРедактированияНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Объект.ВыполнятьВТранзакции			  = Результат.ВыполнятьВТранзакции;
		Объект.ВыполнятьВРежимеЗагрузки		  = Результат.ВыполнятьВРежимеЗагрузки;
		Объект.НеПрерыватьВыполнениеПриОшибке = Результат.НеПрерыватьВыполнениеПриОшибке;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды УстановитьВсеОбъекты.
//
Процедура УстановитьВсеОбъекты(Команда)
	
	УставновитьСнятьВсеОбъекты(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды СнятьВсеОбъекты.
//
Процедура СнятьВсеОбъекты(Команда)
	
	УставновитьСнятьВсеОбъекты(Ложь);
	
КонецПроцедуры

&НаКлиенте
// Устанавливает/снямает флажки в дереве метаданных.
//
Процедура УставновитьСнятьВсеОбъекты(НовоеЗначение)
	
	НаборСтрокДерева = ДеревоТаблиц.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из НаборСтрокДерева Цикл
		
		СтрокаДерева.Использовать = НовоеЗначение;
		
		Для Каждого СтрокаПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
			СтрокаПодчиненная.Использовать = НовоеЗначение;
		КонецЦикла;		
		
	КонецЦикла;
	
	СерверныйИнтерфейс_ПодготовитьСписокВыбранныхОбъектов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды ДобавитьВсеВозможныеПоляОтбора.
//
Процедура ДобавитьВсеВозможныеПоляОтбора(Команда)
	
	СерверныйИнтерфейс_ДобавитьВсеВозможныеПоляОтбора();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды ДеревоТаблицСвернутьРазвернуть.
//
Процедура ДеревоТаблицСвернутьРазвернуть(Команда)
	
	Если Команда.Имя = "ДеревоТаблицРазвернуть" Тогда
		
		ВыполняемоеДействие = "Развернуть";
		
	Иначе
		
		ВыполняемоеДействие = "Свернуть";
		
	КонецЕсли;
	
	СвернутьРазвернутьСписокТаблиц(ВыполняемоеДействие);
	
КонецПроцедуры

&НаКлиенте
// Сворачивает/разворачивает списки.
//
Процедура СвернутьРазвернутьСписокТаблиц(ВыполняемоеДействие)
	
	ЭлементыДерева = ДеревоТаблиц.ПолучитьЭлементы();
	
	Для Каждого СтрокаСпискаТаблиц Из ЭлементыДерева  Цикл
		
		Если ВыполняемоеДействие = "Свернуть" Тогда
			
			Элементы.ДеревоТаблиц.Свернуть(СтрокаСпискаТаблиц.ПолучитьИдентификатор());
			
		Иначе 
			
			Элементы.ДеревоТаблиц.Развернуть(СтрокаСпискаТаблиц.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды ДобавитьВсеВозможныеПоляСортировки.
//
Процедура ДобавитьВсеВозможныеПоляСортировки(Команда)
	
	Для Каждого ДоступноеПолеСортировки Из Объект.Компоновщик.Настройки.Порядок.ДоступныеПоляПорядка.Элементы Цикл
		
		НовоеПолеПорядка = Объект.Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		
		НовоеПолеПорядка.Поле = Новый ПолеКомпоновкиДанных(ДоступноеПолеСортировки.Поле);
		НовоеПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		НовоеПолеПорядка.Использование = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Выбор поля ТаблицаРезультатаОтбора.
//
Процедура ТаблицаРезультатаОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРезультатаОтбора.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные[Поле.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды ЗакрытьОбработку.
//
Процедура ЗакрытьОбработку(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область Серверный_интерфейс

&НаСервере
// Восстанавливает сохраненные настройки.
//
// Параметры:
//	Настройки - тип: Соответствие
//
Процедура СерверныйИнтерфейс_ВосстановитьНастройки(Настройки)
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		
		ОбрабатыватьТабличныеЧасти = Настройки["ОбрабатыватьТабличныеЧасти"];
		ТипОбъекта = Настройки["ТипОбъекта"];
		
		Если НЕ Настройки["ТаблицаВидыОбъектов"] = Неопределено Тогда
			ТаблицаВидыОбъектов.Загрузить(Настройки["ТаблицаВидыОбъектов"]);
		КонецЕсли;
		
		Для Каждого ЭлементВыборка Из Настройки["РезультатВыбора"] Цикл
			РезультатВыбора.Добавить(ЭлементВыборка.Значение, ЭлементВыборка.Представление);
		КонецЦикла;
		
		Если НЕ Настройки.Получить("ВыполнятьВТранзакции") = Неопределено Тогда
			Объект.ВыполнятьВТранзакции = Настройки.Получить("ВыполнятьВТранзакции");
		КонецЕсли;
		
		Если НЕ Настройки.Получить("ВыполнятьВРежимеЗагрузки") = Неопределено Тогда
			Объект.ВыполнятьВРежимеЗагрузки = Настройки.Получить("ВыполнятьВРежимеЗагрузки");
		КонецЕсли;
		
		Если НЕ Настройки.Получить("ОтборПоТипуДляХарактеристик") = Неопределено Тогда
			ОтборПоТипуДляХарактеристик = Настройки.Получить("ОтборПоТипуДляХарактеристик");
		КонецЕсли;			
		
		Если НЕ Настройки.Получить("РежимОтбораХарактеристик") = Неопределено Тогда
			РежимОтбораХарактеристик = Настройки.Получить("РежимОтбораХарактеристик");
		КонецЕсли;	
		
		Если НЕ Настройки.Получить("ТипЗначенияХарактеристики") = Неопределено Тогда
			ТипЗначенияХарактеристики = Настройки.Получить("ТипЗначенияХарактеристики");
		КонецЕсли;	
		
		Если НЕ Настройки.Получить("КэшВидимыхКолонок") = Неопределено Тогда
			Для Каждого КэшированнаяКолонка Из  Настройки.Получить("КэшВидимыхКолонок") Цикл
				КэшВидимыхКолонок.Добавить(КэшированнаяКолонка.Значение);
			КонецЦикла;
		КонецЕсли;	
		
		Если НЕ Настройки.Получить("НеПрерыватьВыполнениеПриОшибке") = Неопределено Тогда
			Объект.НеПрерыватьВыполнениеПриОшибке =Настройки.Получить("НеПрерыватьВыполнениеПриОшибке");
		КонецЕсли;
		
	Иначе
		
		ТипОбъекта = "Справочники";
		
	КонецЕсли;
	
	Попытка
		
		СерверныйИнтерфейс_ПерезаполнитьДеревоТаблиц();
		СерверныйИнтерфейс_ИнициализироватьСКД();
		СерверныйИнтерфейс_ДесериализоватьОтбор(Настройки["Отбор"], Объект.Компоновщик.Настройки.Отбор);
		
	Исключение
		// Не удалось восстановить настройки (например, конфигурация была изменена).
	КонецПопытки;
	
	Если СтрДлина(РежимОтбораХарактеристик) = 0 Тогда
		РежимОтбораХарактеристик = "По выбранным значениям";
	КонецЕсли;
	
	Если НЕ ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Ложь;
	Иначе
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Инициализирует действия обработки.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ИнициализироватьДействия()
	
	НесколькоРеквизитов = Ложь;
	
	Если ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
		
		НесколькоРеквизитов = Истина;
		
	КонецЕсли;
	
	Элементы.ВыбранноеДействие.СписокВыбора.Очистить();
	
	НовоеДействие = Элементы.ВыбранноеДействие.СписокВыбора.Добавить("ИзменитьПометкаУдаления",	"Изменить: [Пометка на удаление]");
	НовоеДействие = Элементы.ВыбранноеДействие.СписокВыбора.Добавить("ИзменитьРеквизиты",		"Изменить: [Реквизиты]");
	
	Если ТипОбъекта = "Документы" Тогда
		
		Элементы.ВыбранноеДействие.СписокВыбора.Добавить("ИзменитьПроведение", "Изменить: [Проведение документа]");
		
	ИначеЕсли ТипОбъекта = "Задачи" Тогда
		
		Элементы.ВыбранноеДействие.СписокВыбора.Добавить("ВыполнитьЗадачу", "Выполнить задачу");
		
	ИначеЕсли ТипОбъекта = "БизнесПроцессы" Тогда
		
		Элементы.ВыбранноеДействие.СписокВыбора.Добавить("Старт", "Стартовать Бизнес-Процесс");
		
	КонецЕсли;
	
	Объект.ФлагИзмененияРеквизитов = Истина; // Заглушка
	
	Если Объект.ФлагИзмененияРеквизитов Тогда
		
		Для Каждого ЭлементМетаданных Из ТаблицаМетаданных Цикл
			
			Если  ЭлементМетаданных.ИмяРеквизита <> "Ссылка" 
				И ЭлементМетаданных.ИмяРеквизита <> "ИмяТЧ"  
				И ЭлементМетаданных.ИмяРеквизита <> "НомерСтроки"  Тогда
				
				Элементы.ВыбранноеДействие.СписокВыбора.Добавить(ЭлементМетаданных.ИмяРеквизита, "Изменить рекзвизит: " + ?(СтрДлина(ЭлементМетаданных.СинонимРеквизита) > 0, ЭлементМетаданных.СинонимРеквизита, ЭлементМетаданных.ИмяРеквизита));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	 
	СерверныйИнтерфейс_УдалитьЭлементНовоеЗначение();
	ВыбранноеДействие = "";
	
	Если НесколькоРеквизитов Тогда
		
		ВыбранноеДействие = "ИзменитьРеквизиты";
		
		СерверныйИнтерфейс_ПодготовитьПараметрыДопополнительныхРеквизитов();
				
	КонецЕсли;
	
КонецПроцедуры // СерверныйИнтерфейс_ИнициализироватьДействия()

&НаСервере
// Удаляет элемент НовоеЗначение.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_УдалитьЭлементНовоеЗначение()
	
	МассивРеквизитовНаУдаление = Новый Массив();
	МассивЭлементовНаУдаление  = Новый Массив();
	
	Для Каждого ЭлементНовоеЗначение Из Элементы.ГруппаНовоеЗначение.ПодчиненныеЭлементы Цикл
		
		Если НЕ ВРег(ЭлементНовоеЗначение.Имя) = ВРег("Заглушка") Тогда
			
			МассивРеквизитовНаУдаление.Добавить(ЭлементНовоеЗначение.ПутьКДанным);
			МассивЭлементовНаУдаление.Добавить(ЭлементНовоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивРеквизитовНаУдаление.Количество() > 0 Тогда
		
		ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитовНаУдаление);
		
		Для Каждого ЭлементНаУдаление Из МассивЭлементовНаУдаление Цикл
			Элементы.Удалить(ЭлементНаУдаление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Инициализирует СКД.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ИнициализироватьСКД()
	
	СхемаКомпоновкиДанных			= Новый СхемаКомпоновкиДанных();
	НовыйИсточник					= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	НовыйИсточник.Имя				= "ИсточникДанных1";
	НовыйИсточник.ТипИсточникаДанных= "Local";
	
	НовыйНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НовыйНаборДанных.ИсточникДанных	= "Local";
	
	НовыйНаборДанных.Имя			= "Основной";
	НовыйНаборДанных.ИмяОбъекта		= "Основной"; 	
	НовыйНаборДанных.ИсточникДанных = "ИсточникДанных1";
	
	ТаблицаМетаданных.Очистить();
	
	ТаблицаОбщихРеквизитов = Новый ТаблицаЗначений();
	
	ТаблицаОбщихРеквизитов.Колонки.Добавить("ОбъектМетаданных");
	ТаблицаОбщихРеквизитов.Колонки.Добавить("КоличествоРеквизитов");
	
	МассивТиповСсылка = Новый Массив();
	
	Для Каждого Элементобъектов Из РезультатВыбора Цикл
		
		Если ТипОбъекта = "Справочники" Тогда
			
			СтрокаТипа = "СправочникСсылка.";
			
		ИначеЕсли ТипОбъекта = "Документы" Тогда 
			
			СтрокаТипа = "ДокументСсылка.";
			
		ИначеЕсли ТипОбъекта = "ПланыВидовРасчета" Тогда
			
			СтрокаТипа = "ПланВидовРасчетаСсылка.";
			
		ИначеЕсли  ТипОбъекта = "ПланыВидовХарактеристик" Тогда
			
			СтрокаТипа = "ПланВидовХарактеристикСсылка.";
			
		ИначеЕсли  ТипОбъекта = "БизнесПроцессы" Тогда
			
			СтрокаТипа = "БизнесПроцессСсылка.";
			
		ИначеЕсли  ТипОбъекта = "Задачи" Тогда
			
			СтрокаТипа = "ЗадачаСсылка.";
			
		КонецЕсли;
		
		Если ОбрабатыватьТабличныеЧасти = Ложь 
		ИЛИ НЕ ТипЗнч(Элементобъектов.Значение) = Тип("Структура") Тогда
			
			МассивТиповСсылка.Добавить(Тип(СтрокаТипа + Элементобъектов.Значение));
			
		Иначе
			
			МассивТиповСсылка.Добавить(Тип(СтрокаТипа + Элементобъектов.Значение.ИмяОбъекта));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбрабатыватьТабличныеЧасти = Ложь Тогда
		
		Для Каждого ОбъектВыбора Из РезультатВыбора Цикл
			
			КоличествоРеквизитов = Метаданные[ТипОбъекта][ОбъектВыбора.Значение].Реквизиты.Количество();
			
			Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение].Реквизиты Цикл
				
				НоваяСтрока = ТаблицаМетаданных.Добавить();
				
				НоваяСтрока.ИмяРеквизита	 = ОбъектМетаданных.Имя;
				НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
				НоваяСтрока.ОписаниеТипов	 = СерверныйИнтерфейс_ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип); 
				НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
				
			КонецЦикла;
			
			Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение].СтандартныеРеквизиты Цикл
				
				Если ОбъектМетаданных.Имя = "Предопределенный" 
				 ИЛИ ОбъектМетаданных.Имя = "ЭтоГруппа" 
				 ИЛИ ОбъектМетаданных.Имя = "Ссылка" Тогда
					
					Продолжить;
					
				Иначе 
					
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита	 = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов	 = СерверныйИнтерфейс_ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип); 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
								
				КонецЕсли;
				
			КонецЦикла;
			
			Если  ТипОбъекта = "Задачи" Тогда
				
				КоличествоРеквизитов = КоличествоРеквизитов +  Метаданные[ТипОбъекта][ОбъектВыбора.Значение].РеквизитыАдресации.Количество();
				
				Для каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение].РеквизитыАдресации Цикл
										
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита	 = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов	 = СерверныйИнтерфейс_ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип); 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
									
				КонецЦикла;
				
			КонецЕсли;
					
			КоличествоРеквизитов = КоличествоРеквизитов + Метаданные[ТипОбъекта][ОбъектВыбора.Значение].СтандартныеРеквизиты.Количество();
			
			НоваяСтрока = ТаблицаОбщихРеквизитов.Добавить();
			
			НоваяСтрока.ОбъектМетаданных	 = ОбъектВыбора.Значение;
			НоваяСтрока.КоличествоРеквизитов = КоличествоРеквизитов;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОбъектВыбора Из РезультатВыбора Цикл
			
			Если ТипЗнч(ОбъектВыбора.Значение) = Тип("Структура") Тогда
				
				КоличествоРеквизитов = Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].Реквизиты.Количество()
									 + Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].СтандартныеРеквизиты.Количество();
				
				Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].Реквизиты Цикл
					
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита	 = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов	 = ОбъектМетаданных.Тип; 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
					
				КонецЦикла;
				
				Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].СтандартныеРеквизиты Цикл
					
					НоваяСтрока = ТаблицаМетаданных.Добавить();		
					НоваяСтрока.ИмяРеквизита	 = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов	 = ОбъектМетаданных.Тип; 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
					
				КонецЦикла;
				
				НоваяСтрока = ТаблицаМетаданных.Добавить();		
				НоваяСтрока.ИмяРеквизита	 = "ИмяТЧ";
				НоваяСтрока.СинонимРеквизита = "Имя ТЧ";
				НоваяСтрока.ОписаниеТипов	 = Новый ОписаниеТипов(,, Новый КвалификаторыСтроки(100)); 
				НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
				
				НоваяСтрока = ТаблицаОбщихРеквизитов.Добавить();
				
				НоваяСтрока.ОбъектМетаданных	 = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
				НоваяСтрока.КоличествоРеквизитов = КоличествоРеквизитов;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОбщихРеквизитов.Сортировать("КоличествоРеквизитов Возр");
	
	Если ТаблицаОбщихРеквизитов.Количество() > 1 Тогда
		СерверныйИнтерфейс_ИсключитьУникальныеРеквизиты(ТаблицаОбщихРеквизитов);
	КонецЕсли;	
	
	ОписаниеТиповСсылка = Новый ОписаниеТипов(МассивТиповСсылка);
	
	НоваяСтрока = ТаблицаМетаданных.Добавить();
	
	НоваяСтрока.ИмяРеквизита	 = "Ссылка";
	НоваяСтрока.СинонимРеквизита = "Ссылка";
	НоваяСтрока.ОписаниеТипов	 = ОписаниеТиповСсылка;
	
	ТаблицаМетаданных.Сортировать("ИмяРеквизита возр");
	
	Для Каждого ЭлементРеквизит Из ТаблицаМетаданных Цикл
		
		НовоеПолеНабораДанных = НовыйНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПолеНабораДанных.Заголовок	  = ЭлементРеквизит.СинонимРеквизита;
		НовоеПолеНабораДанных.Поле		  = ЭлементРеквизит.ИмяРеквизита;
		НовоеПолеНабораДанных.ТипЗначения = ЭлементРеквизит.ОписаниеТипов;
		НовоеПолеНабораДанных.ПутьКДанным = ЭлементРеквизит.ИмяРеквизита;
		
		Если ЭлементРеквизит.ИмяРеквизита = "ИмяТЧ" Тогда
			
			НовоеПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
			НовоеПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	НоваяГруппировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Использование = Истина;
	
	Для Каждого ЭлементРеквизит Из ТаблицаМетаданных Цикл
		
		НовоеПолеКомпоновкиДанных = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПолеКомпоновкиДанных.Использование = Истина;
		НовоеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ЭлементРеквизит.ИмяРеквизита);
		
		ВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Истина;
		ВыбранноеПоле.Заголовок		= ЭлементРеквизит.СинонимРеквизита;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементРеквизит.ИмяРеквизита);
		
	КонецЦикла;
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,ЭтаФорма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	Объект.Компоновщик.Инициализировать(ИсточникНастроек);
	
	Объект.Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ТипОбъекта = "Документы" Тогда
		
		НовоеПолеСортировки = Объект.Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НовоеПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("Дата");	
		
	ИначеЕсли ТипОбъекта = "ПланыВидовХарактеристик" Тогда
		
		СерверныйИнтерфейс_ИнициализироватьДополнительныеОтборыХарактеристик();
		
	КонецЕсли;
	
КонецПроцедуры // СерверныйИнтерфейс_ИнициализироватьСКД()

&НаСервере
// Инициализирует дополнительные отборы характеристик.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ИнициализироватьДополнительныеОтборыХарактеристик()
	
	ОписаниеТипов = Новый ОписаниеТипов();
	
	Для Каждого ВыбраннаяХарактеристика Из РезультатВыбора Цикл
		
		ТипыЗначенияХарактеристики = Метаданные.ПланыВидовХарактеристик[ВыбраннаяХарактеристика.Значение].Тип;
		ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ТипыЗначенияХарактеристики.Типы());
		
	КонецЦикла;
	
	ТипЗначенияХарактеристики = Новый ОписаниеТипов(ОписаниеТипов);
		
КонецПроцедуры

&НаСервере
// Исключает уникальные реквизиты.
//
Процедура СерверныйИнтерфейс_ИсключитьУникальныеРеквизиты(ТаблицаОбщихРеквизитов)
	
	Эталон = ТаблицаОбщихРеквизитов.Получить(0).ОбъектМетаданных;
	
	ТаблицаРезультат = ТаблицаМетаданных.Выгрузить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ОбъектМетаданных", Эталон);	
	
	ТаблицаЭталонныхРеквизитов = ТаблицаРезультат.Скопировать(Отбор);
	ТаблицаРезультат.Очистить();
	
	Для Каждого СтрокаЭталон Из ТаблицаЭталонныхРеквизитов Цикл
		
		ОтборПоЭталону = Новый Структура();
		ОтборПоЭталону.Вставить("ИмяРеквизита", СтрокаЭталон.ИмяРеквизита);
		
		НайденныеСтроки = ТаблицаМетаданных.НайтиСтроки(ОтборПоЭталону); 
		
		Если НайденныеСтроки.Количество() = ТаблицаОбщихРеквизитов.Количество() Тогда
			
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭталон);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаМетаданных.Очистить();
	ТаблицаМетаданных.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаСервере
// Обновляет интерфейс после выполнения обработки объектов.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ОбновитьПослеВыполнения()
	
	Если ОбрабатыватьТабличныеЧасти = Ложь Тогда
		
		Для Каждого ЭлементСписка Из ТаблицаРезультатаОтбора Цикл
			ЗаполнитьЗначенияСвойств(ЭлементСписка, ЭлементСписка.Ссылка);
		КонецЦикла;
		
	Иначе 
		
		Для Каждого ЭлементСписка Из ТаблицаРезультатаОтбора Цикл
			
			НужнаяСтрока = ЭлементСписка.Ссылка[ЭлементСписка.ИмяТЧ].Получить(ЭлементСписка.НомерСтроки - 1);
			ЗаполнитьЗначенияСвойств(ЭлементСписка, НужнаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	НовыйЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Использование = Истина;
		
	НовыйЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРезультатаОтбора.ОбработанУспешно");	
	НовыйЭлементОтбора.ВидСравнения	  = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = "Нет";
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,,));
	
	НовоеПолеОформление = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРезультатаОтбораИспользовать");
	
	Для Каждого  ДоступнаяКолонка Из Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ДоступнаяКолонка) = Тип("ПолеФормы") Тогда
			
			НовоеПолеОформление =  НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ДоступнаяКолонка.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Сохраняет настройки параметров СКД.
//
Процедура СерверныйИнтерфейс_СохранитьДанныеВНастройках()
	
	Настройки = Новый Соответствие();
	СерверныйИнтерфейс_ЗаполнитьНастройкиПриСохранении(Настройки);
		
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы,, Настройки);
	
КонецПроцедуры

&НаСервере
// Записывает отборы СКД в XML.
//
Процедура СерверныйИнтерфейс_СериализоватьОтбор(Отбор, ЗаписьXML) Экспорт 
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементОтбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Читает XML с отборами СКД.
//
Процедура СерверныйИнтерфейс_ДесериализоватьОтбор(Настройки_Отбор, Отбор)
	
	Отбор.Элементы.Очистить();
	
	Если НЕ Настройки_Отбор = Неопределено Тогда
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(Настройки_Отбор);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		   И ЧтениеXML.Имя = "Отборы" Тогда
			
			ЧтениеXML.Прочитать();
			
			Пока НЕ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			   И НЕ ЧтениеXML.Имя = "Отборы" Цикл
				
				ПолеОтбораXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
				ПолеОтбора = Отбор.Элементы.Добавить(ТипЗнч(ПолеОтбораXML));
				СерверныйИнтерфейс_СкопироватьЭлементыОтбораРекурсивно(ПолеОтбораXML, ПолеОтбора);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Рекурсивно копирует элементы отбора СКД.
//
Процедура СерверныйИнтерфейс_СкопироватьЭлементыОтбораРекурсивно(ОтборОткуда, ОтборКуда) Экспорт 
	
	ЗаполнитьЗначенияСвойств(ОтборКуда, ОтборОткуда);
	
	Если ТипЗнч(ОтборОткуда) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементОтбора Из ОтборОткуда.Элементы Цикл
			
			НовыйЭлементОтбора = ОтборКуда.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
			СерверныйИнтерфейс_СкопироватьЭлементыОтбораРекурсивно(ЭлементОтбора, НовыйЭлементОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Перезаполняет дерево таблиц.
//
// Параметры:
//	ОбрабатыватьТабличныеЧастиКлиент - тип: Булево или Неопределено
//
Процедура СерверныйИнтерфейс_ПерезаполнитьДеревоТаблиц(ОбрабатыватьТабличныеЧастиКлиент = Неопределено)
		
	Если НЕ ОбрабатыватьТабличныеЧастиКлиент = Неопределено Тогда
		ОбрабатыватьТабличныеЧасти = ОбрабатыватьТабличныеЧастиКлиент;
	КонецЕсли;
	
	ТаблицаОтмеченных = ТаблицаВидыОбъектов.Выгрузить();
	
	ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоТаблиц");
	ДеревоМетаданных.Строки.Очистить();
	
	Для Каждого ЭлементМетаданных Из Метаданные[ТипОбъекта] Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИмяТаблицы", ЭлементМетаданных.Имя);
		
		НайденныеСтроки = ТаблицаОтмеченных.НайтиСтроки(Отбор);
		
		Если ОбрабатыватьТабличныеЧасти 
		   И ЭлементМетаданных.ТабличныеЧасти.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ДеревоМетаданных.Строки.Добавить();
		
		НоваяСтрока.ПредставлениеТаблицы = ЭлементМетаданных.Синоним;
		НоваяСтрока.ИмяТаблицы			 = ЭлементМетаданных.Имя;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.Использовать = Истина;
		КонецЕсли;
		
		Если ОбрабатыватьТабличныеЧасти = Истина Тогда
			
			Для Каждого МетаТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл 
				
				НоваяСтрокаПодчиненная = НоваяСтрока.Строки.Добавить();
				
				НоваяСтрокаПодчиненная.ПредставлениеТаблицы = МетаТабличнаяЧасть.Синоним;
				НоваяСтрокаПодчиненная.ИмяТаблицы			= МетаТабличнаяЧасть.Имя;
				
				Отбор = Новый Структура();
				Отбор.Вставить("ИмяТаблицы", ЭлементМетаданных.Имя);
                Отбор.Вставить("ИмяТЧ", МетаТабличнаяЧасть.Имя);
				
				НайденныеСтроки = ТаблицаОтмеченных.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					НоваяСтрокаПодчиненная.Использовать = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоМетаданных, "ДеревоТаблиц");
	
КонецПроцедуры // СерверныйИнтерфейс_ПерезаполнитьДеревоТаблиц()

&НаСервере
// Подготавливает список выбранных объектов.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ПодготовитьСписокВыбранныхОбъектов()
	
	РезультатВыбора = Новый СписокЗначений();
	СерверныйИнтерфейс_ПодготовитьСписок(РезультатВыбора);

	КэшОтбора = Объект.Компоновщик.Настройки.Отбор.Элементы;
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		Если ОбрабатыватьТабличныеЧасти = Ложь Тогда 
			
			ТаблицаМетаданных.Очистить();
			ТаблицаВидыОбъектов.Очистить();
			
			Для Каждого ЭлементРезультат Из РезультатВыбора Цикл
				
				НоваяСтрока = ТаблицаВидыОбъектов.Добавить();
				НоваяСтрока.ИмяТаблицы = ЭлементРезультат.Значение;
				НоваяСтрока.ПредставлениеТаблицы = ЭлементРезультат.Представление;
				
			КонецЦикла;
			
			ТаблицаРезультатаОтбора.Очистить();
			
			СерверныйИнтерфейс_ИнициализироватьСКД();
			
			Если НЕ ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
				ВыбранноеДействие = "";
			КонецЕсли;
			
		Иначе
			
			ТаблицаМетаданных.Очистить();
			ТаблицаВидыОбъектов.Очистить();
			ТаблицаРезультатаОтбора.Очистить();
			
			Для Каждого ЭлементРезультат Из РезультатВыбора Цикл
				
				НоваяСтрока = ТаблицаВидыОбъектов.Добавить();
				НоваяСтрока.ИмяТаблицы = ЭлементРезультат.Значение.ИмяОбъекта;
				НоваяСтрока.ИмяТЧ = ЭлементРезультат.Значение.ИмяТЧ;
				НоваяСтрока.ПредставлениеТаблицы = ЭлементРезультат.Представление;
				
			КонецЦикла;
			
			СерверныйИнтерфейс_ИнициализироватьСКД();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СерверныйИнтерфейс_ИнициализироватьДействия();
		
	КэшВидимыхКолонок.Очистить();	
	
	СерверныйИнтерфейс_ВосстановитьОтборИзКэша(Объект.Компоновщик.Настройки.Отбор.Элементы, КэшОтбора, Объект.Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора);
	
	СерверныйИнтерфейс_ОчиститьУсловноеОформление();
	
КонецПроцедуры // СерверныйИнтерфейс_ПодготовитьСписокВыбранныхОбъектов()

&НаСервере
// Вспомогательная подготовка списка выбранных объектов.
//
// Параметры:
//	СписокВыбора - тип: СписокЗначений
//
Процедура СерверныйИнтерфейс_ПодготовитьСписок(СписокВыбора)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоТаблиц");
	
	Если ОбрабатыватьТабличныеЧасти = Ложь Тогда
		
		Для Каждого ЭлементМетаданных Из ДеревоМетаданных.Строки Цикл
			
			Если ЭлементМетаданных.Использовать Тогда
				СписокВыбора.Добавить(ЭлементМетаданных.ИмяТаблицы,ЭлементМетаданных.ПредставлениеТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе 
		
		Для Каждого ЭлементМетаданных Из ДеревоМетаданных.Строки Цикл
			
			Если ЭлементМетаданных.Использовать Тогда
						
				Для Каждого ТЧОбъекта Из ЭлементМетаданных.Строки Цикл
					
					Если ТЧОбъекта.Использовать Тогда
						
						Структура = Новый Структура();
						Структура.Вставить("ИмяОбъекта", ЭлементМетаданных.ИмяТаблицы);
						Структура.Вставить("ИмяТЧ", ТЧОбъекта.ИмяТаблицы);
						
						СписокВыбора.Добавить(Структура , ЭлементМетаданных.ПредставлениеТаблицы + " [ ТЧ: " + ТЧОбъекта.ПредставлениеТаблицы + " ]");
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
// Очищает условное оформление.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ОчиститьУсловноеОформление()
	
	Если ЭтаФорма.УсловноеОформление.Элементы.Количество() > 0 Тогда
		 ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Рекурсивное восстановление отбора из кэша.
//
Процедура СерверныйИнтерфейс_ВосстановитьОтборИзКэша(ЭлементыОтбора, КэшОтбора, ОтборДоступныеПоляОтбора)
	
	Если КэшОтбора.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из КэшОтбора Цикл
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				НовоеПоле = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовоеПоле,ЭлементОтбора);
				СерверныйИнтерфейс_ВосстановитьОтборИзКэша(НовоеПоле.Элементы, ЭлементОтбора.Элементы, ОтборДоступныеПоляОтбора)
				
			Иначе
				
			Если НЕ Объект.Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение) = Неопределено Тогда
				
				 НовоеПоле = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				 ЗаполнитьЗначенияСвойств(НовоеПоле, ЭлементОтбора);
				
			КонецЕсли;	
			
			КонецЕсли;
		
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет настройки СКД при сохранении.
//
// Параметры:
//	Настройки - тип: Соответствие
//
Процедура СерверныйИнтерфейс_ЗаполнитьНастройкиПриСохранении(Настройки)
	
	Если Настройки = Неопределено Тогда
		 Настройки = Новый Соответствие();
	КонецЕсли;
	
	Настройки.Вставить("ОбрабатыватьТабличныеЧасти",	ОбрабатыватьТабличныеЧасти);
	Настройки.Вставить("ТаблицаВидыОбъектов",			ТаблицаВидыОбъектов.Выгрузить());
	Настройки.Вставить("РезультатВыбора",				РезультатВыбора);
	Настройки.Вставить("ТипОбъекта",					ТипОбъекта);
	
	Настройки.Вставить("ВыполнятьВТранзакции",			Объект.ВыполнятьВТранзакции);
	Настройки.Вставить("ВыполнятьВРежимеЗагрузки",		Объект.ВыполнятьВРежимеЗагрузки);
	
	Настройки.Вставить("ОтборПоТипуДляХарактеристик",	ОтборПоТипуДляХарактеристик);
	Настройки.Вставить("РежимОтбораХарактеристик",		РежимОтбораХарактеристик);
	Настройки.Вставить("ТипЗначенияХарактеристики",		ТипЗначенияХарактеристики);	
	Настройки.Вставить("КэшВидимыхКолонок",				КэшВидимыхКолонок);	
	Настройки.Вставить("НеПрерыватьВыполнениеПриОшибке",Объект.НеПрерыватьВыполнениеПриОшибке);	
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отборы");	
	
	СерверныйИнтерфейс_СериализоватьОтбор(Объект.Компоновщик.Настройки.Отбор.Элементы, ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ХранилищеНастроек = ЗаписьXML.Закрыть();
	
	Настройки.Вставить("Отбор", ХранилищеНастроек);
	
КонецПроцедуры

&НаСервере
// Добавляет поля отбора.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ДобавитьВсеВозможныеПоляОтбора()
	
	Для Каждого ДоступноеПолеОтбора Из Объект.Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		
		НовоеПолеОтбора = Объект.Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовоеПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДоступноеПолеОтбора.Поле);
		
		Если ДоступноеПолеОтбора.ДоступныеВидыСравнения.Количество() > 0 Тогда
			НовоеПолеОтбора.ВидСравнения =  ДоступноеПолеОтбора.ДоступныеВидыСравнения.Получить(0).Значение;
		КонецЕсли;
		
		НовоеПолеОтбора.Использование = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Добавляет/удалет реквизиты формы.
//
Процедура СерверныйИнтерфейс_ДобавитьУдалитьРеквизиты(ТаблицаКопия = Неопределено)
	
	РеквизитыНаУдаление = Новый Массив();
	ЭлементыНаУдаление  = Новый Массив();
	
	Для Каждого ЭлементРеквизита Из Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы Цикл
		
		РеквизитыНаУдаление.Добавить(ЭлементРеквизита.ПутьКДанным);
		ЭлементыНаУдаление.Добавить(ЭлементРеквизита);
		
	КонецЦикла;
	
	Если РеквизитыНаУдаление.Количество() > 0 Тогда
		
		ЭтаФорма.ИзменитьРеквизиты(, РеквизитыНаУдаление);
		
		Для Каждого ЭлементНаУдаление Из ЭлементыНаУдаление Цикл
			Элементы.Удалить(ЭлементНаУдаление);
		КонецЦикла;
		
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив();
	
	Если НЕ ТаблицаКопия = Неопределено Тогда
		
		Для Каждого ЭлементРекзвизита Из ТаблицаКопия Цикл
			
			НовыйРеквизитФормы = Новый РеквизитФормы(ЭлементРекзвизита.ИмяРеквизита,
													 ЭлементРекзвизита.ОписаниеТипов,
													 "ТаблицаРезультатаОтбора",
													 ЭлементРекзвизита.СинонимРеквизита);
			
			МассивРеквизитов.Добавить(НовыйРеквизитФормы);
			
		КонецЦикла;	
		
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		
		Для Каждого ЭлементРеквизита Из ТаблицаКопия Цикл
			
			НовыйЭлементРодитель		= Элементы.ТаблицаРезультатаОтбора.ПодчиненныеЭлементы.ТаблицаРезультатаОтбораПрограммно;
			НовыйЭлемент				= Элементы.Добавить(ЭлементРеквизита.ИмяРеквизита, Тип("ПолеФормы"), НовыйЭлементРодитель);
			НовыйЭлемент.ПутьКДанным	= "ТаблицаРезультатаОтбора." + ЭлементРеквизита.ИмяРеквизита;
			НовыйЭлемент.Заголовок		= ?(СтрДлина(ЭлементРеквизита.СинонимРеквизита) = 0, ЭлементРеквизита.ИмяРеквизита, ЭлементРеквизита.СинонимРеквизита);
			НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ТолькоПросмотр	= Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СерверныйИнтерфейс_ДобавитьУдалитьРеквизиты()

&НаСервере
// Возвращает недопустивые типы реквизитов.
//
// ТипРеквизита - тип: Тип
//
// Возвращаемое значение:
//	ОписаниеРеквизита - тип: ОписаниеТипов
//
Функция СерверныйИнтерфейс_ИсключитьНедопустимыеТипы(ТипРеквизита) 
	
	МассивНедопустимых = ПолучитьНедопустимыеТипы();
	
	МассивИсключаемыхТипов = Новый Массив();
	
	Для Каждого ЭлементНедопустимый Из МассивНедопустимых Цикл
		
		Если ТипРеквизита.СодержитТип(ЭлементНедопустимый) Тогда
			МассивИсключаемыхТипов.Добавить(ЭлементНедопустимый);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивИсключаемыхТипов.Количество() = 0 Тогда
		
		ОписаниеРеквизита = ТипРеквизита;
		
	Иначе
		
		ОписаниеРеквизита = Новый ОписаниеТипов(ТипРеквизита,, МассивИсключаемыхТипов);
		
	КонецЕсли;
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

&НаСервере
// Возвращает допустимые типы значений.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	МассивДоступныхТипов - тип: Массив
//
Функция СерверныйИнтерфейс_ПолучитьДоступныеТипыЗначений()
	
	ТаблицаТипов = Новый ТаблицаЗначений();
	ТаблицаТипов.Колонки.Добавить("МассивТипов");
	ТаблицаТипов.Колонки.Добавить("КоличествоРазличных");
	
	Для Каждого ВыбраннаяХарактеристика Из РезультатВыбора Цикл
		
		ТипыЗначенияХарактеристики = Метаданные.ПланыВидовХарактеристик[ВыбраннаяХарактеристика.Значение].Тип;
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.МассивТипов = ТипыЗначенияХарактеристики.Типы();
		НоваяСтрока.КоличествоРазличных = НоваяСтрока.МассивТипов.Количество();
		
	КонецЦикла;
	
	ТаблицаТипов.Сортировать("КоличествоРазличных Возр");
	
	МассивДоступныхТипов = Новый Массив();
	
	СтрокаЭталон = ТаблицаТипов.Получить(0);
	
	Для Каждого ЭлементЭталона Из СтрокаЭталон.МассивТипов Цикл
		
		ВходитВоВсе = Истина;

		Если ТаблицаТипов.Количество() > 1 Тогда
						
			Для Индекс = 1 По ТаблицаТипов.Количество() - 1 Цикл
								
				СтрокаСравнение = ТаблицаТипов.Получить(Индекс);
				
				ОписаниеТиповСравнение = Новый ОписаниеТипов(СтрокаСравнение.МассивТипов);
				
				Если ОписаниеТиповСравнение.СодержитТип(ЭлементЭталона) = Ложь Тогда
					
					ВходитВоВсе = Ложь;
					Прервать;
					
				КонецЕсли;
					
			КонецЦикла;	
			
		КонецЕсли;
		
		Если ВходитВоВсе Тогда
			МассивДоступныхТипов.Добавить(ЭлементЭталона);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДоступныхТипов;
	
КонецФункции

&НаСервере
// Устанавливает новое действие.
//
Процедура СерверныйИнтерфейс_УстановитьНовоеДействие()
	
	СерверныйИнтерфейс_УдалитьЭлементНовоеЗначение();
	
	МожноСтартовать = Ложь;
	
	МассивНовыхРекзвизитов = Новый Массив();
	
	Если ВыбранноеДействие = "ИзменитьПометкаУдаления" 
	 ИЛИ ВыбранноеДействие = "ИзменитьПроведение" Тогда
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип("Булево"));
		
		ОписаниеТиповБулево = Новый ОписаниеТипов(МассивТипов);
		
		НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", ОписаниеТиповБулево,, "Новое значение");
		
		МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
		
		ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
		
		НовыйЭлементРодитель = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыбранноеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
		НовыйЭлемент = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
		НовыйЭлемент.ПутьКДанным = "НовоеЗначение";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		
	ИначеЕсли ВыбранноеДействие = "ВыполнитьЗадачу"
		 ИЛИ (ВыбранноеДействие = "Старт" 
			И ОбрабатыватьТабличныеЧасти = Истина) Тогда 
		
		// Никакого выбранного действия нет.
		
	ИначеЕсли ВыбранноеДействие = "Старт" 
			И ОбрабатыватьТабличныеЧасти = Ложь Тогда
		
		БизнесПроцессПример = РезультатВыбора.Получить(0).Значение;
    	
		Если РезультатВыбора.Количество() = 1 Тогда
			
			КартаМаршрута = БизнесПроцессы[БизнесПроцессПример] .ПолучитьКартуМаршрута();
			
			СписокТочек = Новый СписокЗначений();
			
			Счетчик = 0;
			
			Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы  Цикл
				
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Тогда
					
					СписокТочек.Добавить(Счетчик, ЭлементСхемы.Наименование);
					
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			Если СписокТочек.Количество() > 0 Тогда
				
				МожноСтартовать = Истина;
				
				МассивТС = Новый Массив();
				МассивТС.Добавить(Тип("Строка"));
				
				ОписаниеТиповТС = Новый ОписаниеТипов(МассивТС);
				НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", ОписаниеТиповТС, , "Точка старта");
				
				МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
				
				ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
				
				НовыйЭлементРодитель = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыбранноеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
				НовыйЭлемент					  = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
				НовыйЭлемент.ПутьКДанным		  = "НовоеЗначение";
				НовыйЭлемент.Вид				  = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.КнопкаСпискаВыбора   = Истина;
				НовыйЭлемент.РедактированиеТекста = Ложь;
				
				Для Каждого ТочкаСтартаБП Из СписокТочек Цикл
					НовыйЭлемент.СписокВыбора.Добавить(ТочкаСтартаБП.Значение, ТочкаСтартаБП.Представление);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИмяРеквизита", ВыбранноеДействие);
		НайденноеЗначение = ТаблицаМетаданных.НайтиСтроки(Отбор);
		
		Если НайденноеЗначение.Количество() > 0 Тогда
			
			НайденноеЗначение = НайденноеЗначение.Получить(0);
			
			НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", НайденноеЗначение.ОписаниеТипов, , "Новое значение");
			
			МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
			
			ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
			
			НовыйЭлементРодитель	 = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыбранноеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
			НовыйЭлемент			 = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
			НовыйЭлемент.ПутьКДанным = "НовоеЗначение";
			НовыйЭлемент.Вид		 = ВидПоляФормы.ПолеВвода;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СерверныйИнтерфейс_УстановитьНовоеДействие()

&НаСервере
// Подготавливает параметры дополнительных реквизитов.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ПодготовитьПараметрыДопополнительныхРеквизитов()
		
	КэшТаблицаРеквизиты = ТаблицаРеквизиты.Выгрузить();
	
	ТаблицаРеквизиты.Очистить();

	Для Каждого ЭлементМетаданных Из ТаблицаМетаданных Цикл
			
			Если  ЭлементМетаданных.ИмяРеквизита <> "Ссылка" 
				И ЭлементМетаданных.ИмяРеквизита <> "ИмяТЧ"  
				И ЭлементМетаданных.ИмяРеквизита <> "НомерСтроки" 
				И ЭлементМетаданных.ИмяРеквизита <> "Предопределенный" Тогда
				
				НоваяСтрока = ТаблицаРеквизиты.Добавить();				
				
				НоваяСтрока.ИмяРеквизита =  ЭлементМетаданных.ИмяРеквизита;
				
				Если СтрДлина(ЭлементМетаданных.СинонимРеквизита) = 0 Тогда
					
					НоваяСтрока.СинонимРеквизита = ЭлементМетаданных.ИмяРеквизита;
					
				Иначе
					
	  				НоваяСтрока.СинонимРеквизита = ЭлементМетаданных.СинонимРеквизита;
					
				КонецЕсли;
			
	  		 	НоваяСтрока.ДоступныеТипыЗначений = ЭлементМетаданных.ОписаниеТипов;
	 		  	НоваяСтрока.Изменять = Ложь;
 
				НайденнаяСтрокаКэша = КэшТаблицаРеквизиты.Найти(НоваяСтрока.ИмяРеквизита, "ИмяРеквизита");
				
				Если НЕ НайденнаяСтрокаКэша = Неопределено Тогда
					
					Если НоваяСтрока.ДоступныеТипыЗначений.СодержитТип(ТипЗнч(НайденнаяСтрокаКэша.НовоеЗначение)) Тогда
						
						НоваяСтрока.НовоеЗначение = НайденнаяСтрокаКэша.НовоеЗначение;
						НоваяСтрока.Изменять = НайденнаяСтрокаКэша.Изменять;
						
					КонецЕсли;
					
				КонецЕсли;
				
	 		  	НоваяСтрока.ДоступныеТипыЗначений = ЭлементМетаданных.ОписаниеТипов;
				
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // СерверныйИнтерфейс_ПодготовитьПараметрыДопополнительныхРеквизитов()

&НаСервере
// Возвращает количество отобранных элементов.
//
Функция СерверныйИнтерфейс_ПолучитьКоличествоОтобранныхОбъектов()
	
	Возврат ТаблицаРезультатаОтбора.Количество();
	
КонецФункции

&НаСервере
// Обращается к экспортной процедуре "ВыполнитьКоманду()" модуля объекта.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ВыполнитьОбработкуДанных()
	
	ОсновныеПараметрыКоманды = Новый Структура();
	ОсновныеПараметрыКоманды.Вставить("ФоновыйРежим", Ложь);
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.ВыполнитьКоманду(ОсновныеПараметрыКоманды);
	
КонецПроцедуры

#КонецОбласти


#Область Отбор_объектов_для_обработки

&НаСервере
// Отбирает объекты для обработки.
//
// Параметры:
//	Нет
//
Процедура СерверныйИнтерфейс_ОтобратьОбъекты()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	РезультатОтбора = Новый ТаблицаЗначений();
	
	ТаблицаКопия = ТаблицаМетаданных.Выгрузить();
	ТаблицаКопия.Свернуть("ИмяРеквизита, СинонимРеквизита, ОписаниеТипов");
	
	Для Каждого ОбъектМетаданных Из ТаблицаКопия Цикл
		
		НоваяКолонка = РезультатОтбора.Колонки.Добавить(ОбъектМетаданных.ИмяРеквизита, ОбъектМетаданных.ОписаниеТипов, ОбъектМетаданных.СинонимРеквизита);
		
	КонецЦикла;
	
	СерверныйИнтерфейс_ДобавитьУдалитьРеквизиты(ТаблицаКопия);
	
	Если ОбрабатыватьТабличныеЧасти = Ложь Тогда
		
		Для Каждого ОтобранныйОбъект Из РезультатВыбора Цикл
			
			КоллекцияПолейЗапроса = Новый Массив();
			
			// Получаем метаданные текущего объекта.
			// Обрабатываем коллекции объектов метаданных "Реквизиты" и "Стандартные реквизиты".
			ОбъектМетаданных = Метаданные[ТипОбъекта][ОтобранныйОбъект.Значение];
			
			ИмяТипаОбъекта = ПолучитьИмяТипаОбъекта(ОбъектМетаданных);
			
			// Стандартные реквизиты.
			Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
				КоллекцияПолейЗапроса.Добавить(Реквизит.Имя);
			КонецЦикла;
			
			// Реквизиты.
			Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				КоллекцияПолейЗапроса.Добавить(Реквизит.Имя);
			КонецЦикла;
			
			ПоляЗапроса = "";
			Для Каждого ПолеЗапроса Из КоллекцияПолейЗапроса Цикл
				Разделитель = ?(ПустаяСтрока(ПоляЗапроса), "", ",");
				ПоляЗапроса = ПоляЗапроса + Разделитель + ПолеЗапроса;
			КонецЦикла;
			
			// Формируем шаблон текста запроса.
			ШаблонТекстаЗапроса = 
			"ВЫБРАТЬ"			+ Символы.ПС +
				ПоляЗапроса		+ Символы.ПС +
			"ИЗ"				+ Символы.ПС +
				ИмяТипаОбъекта	+ "." + ОтобранныйОбъект.Значение + Символы.ПС +
			"ГДЕ &УсловияВЗапросе" ;
			
			УсловияВЗапросе = "";
			ПараметрыЗапроса = Новый Структура();
			
			УсловияИПараметрыЗапроса = ПолучитьУсловияИПараметрыЗапроса(ИмяТипаОбъекта);
			Если ТипЗнч(УсловияИПараметрыЗапроса) = Тип("Соответствие") Тогда
				
				УсловияВЗапросе	 = УсловияИПараметрыЗапроса["УсловияВЗапросе"];
				ПараметрыЗапроса = УсловияИПараметрыЗапроса["ПараметрыЗапроса"];
				
			КонецЕсли;
			
			Если ПустаяСтрока(УсловияВЗапросе) Тогда
				УсловияВЗапросе = "ИСТИНА"; // Нет отборов.
			КонецЕсли;
			
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&УсловияВЗапросе", УсловияВЗапросе);
			
			Запрос = Новый Запрос(ШаблонТекстаЗапроса);
			Для Каждого Параметр Из ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
			КонецЦикла;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НоваяСтрока = РезультатОтбора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка); 
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе 
		
		СтрокаПолейЗапроса = "";
		КоличествоПолей = ТаблицаМетаданных.Количество();
		Счетчик = 1;
		
		Для Каждого СтрокаТМ Из ТаблицаМетаданных Цикл
			
			Если СтрокаТМ.ИмяРеквизита <> "ИмяТЧ" Тогда
				
				СтрокаПолейЗапроса = СтрокаПолейЗапроса + СтрокаТМ.ИмяРеквизита;
				
				Если Счетчик <> КоличествоПолей Тогда
					
					СтрокаПолейЗапроса = СтрокаПолейЗапроса + ", ";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		СтрокаПолейЗапроса = СтрокаПолейЗапроса  + ", ""СТРОКАИМЯТЧ"" Как ИмяТЧ"; 
		
		ШаблонЗапроса = "ВЫБРАТЬ
		|	ОбъектСиноним." + СтрокаПолейЗапроса + " ИЗ ТИПОбъекта.ИмяОбъекта.ИмяТаблЧасти КАК ОбъектСиноним";
		
		Если ТипОбъекта = "Справочники" Тогда
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "Справочник");
			
		ИначеЕсли ТипОбъекта = "Документы" Тогда
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "Документ");
			
		ИначеЕсли ТипОбъекта = "ПланыВидовРасчета" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "ПланВидовРасчета");
			
		ИначеЕсли ТипОбъекта = "ПланыВидовХарактеристик" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "ПланВидовХарактеристик"); 
			
		ИначеЕсли ТипОбъекта = "БизнесПроцессы" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "БизнесПроцесс"); 
			
		ИначеЕсли ТипОбъекта = "Задачи" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "Задача"); 
			
		КонецЕсли;				
		
		Счетчик = 1;
		КоличесвтоТЧ = РезультатВыбора.Количество();
		
		ТекстЗапроса = "";
		
		Для Каждого ОтобранныйОбъект Из РезультатВыбора Цикл 
			
			ТекстЗапросаПоОбъекту = СтрЗаменить(ШаблонЗапроса,			"ИмяОбъекта",	ОтобранныйОбъект.Значение.ИмяОбъекта);
			ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту,	"ИмяТаблЧасти",	ОтобранныйОбъект.Значение.ИмяТЧ);
			ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту,	"СТРОКАИМЯТЧ",	ОтобранныйОбъект.Значение.ИмяТЧ);
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоОбъекту;
			
			Если НЕ Счетчик = КоличесвтоТЧ Тогда
				
				ТекстЗапроса = ТекстЗапроса + " Объединить все ";
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = РезультатОтбора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Основной",РезультатОтбора);
	
	НастройкиКомпоновки = Объект.Компоновщик.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
														НастройкиКомпоновки,,,
														Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ТаблицаВывода = ТаблицаРезультатаОтбора.Выгрузить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаРезультат.Колонки.Добавить("Использовать");
	ТаблицаРезультат.ЗаполнитьЗначения(Истина, "Использовать"); 
	
	ТаблицаРезультатаОтбора.Очистить();
	
	Если ТипОбъекта = "ПланыВидовХарактеристик"
	   И ОтборПоТипуДляХарактеристик Тогда
		
		Для Каждого СтрокаТаблицыРезультат Из ТаблицаРезультат Цикл
			
			Для Каждого ТипыОтбора Из ТипЗначенияХарактеристики.Типы() Цикл
				
				Если РежимОтбораХарактеристик = "По выбранным значениям" Тогда									
					
					Если СтрокаТаблицыРезультат.ТипЗначения.СодержитТип(ТипыОтбора) Тогда
						
						НоваяСтрока = ТаблицаРезультатаОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультат);
						
					КонецЕсли;
					
				ИначеЕсли РежимОтбораХарактеристик = "По доступным значениям" Тогда
					
					Если СтрокаТаблицыРезультат.Ссылка.Метаданные().Тип.СодержитТип(ТипыОтбора) Тогда
						
						НоваяСтрока = ТаблицаРезультатаОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультат);
						
					КонецЕсли;					   
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаРезультатаОтбора.Загрузить(ТаблицаРезультат);
		
	КонецЕсли;
		
	СерверныйИнтерфейс_ИнициализироватьДействия();
	
КонецПроцедуры // СерверныйИнтерфейс_ОтобратьОбъекты()

#КонецОбласти


#Область Запуск_обработки_в_фоновом_режиме

&НаСервере
// Получает текущее значение индикатора из сообщений сервера пользователю.
//
Процедура СерверныйИнтерфейс_ПолучитьТекущееЗначениеИндикатора(ИдентификаторФоновогоЗадания, Индикатор)

	// Поиск фонового задания по уникальному идентификатору.
	ТекущиеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", ИдентификаторФоновогоЗадания));

	Если ТекущиеЗадания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивСообщений	= Неопределено;
	ТекущееЗадание	= ТекущиеЗадания[0];

	// Проверка состояния текущего задания.
	Если ТекущееЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда

		МассивСообщений = ТекущееЗадание.ПолучитьСообщенияПользователю(Истина);

		Если МассивСообщений = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Сообщение Из МассивСообщений Цикл

			Если Сообщение.ИдентификаторНазначения = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
				Попытка
					Индикатор = Число(Сообщение.Текст); // Преобразование текста в число.
				Исключение
				КонецПопытки;									
			Иначе
				СообщитьПользователю(Сообщение.Текст, Сообщение.КлючДанных, Сообщение.Поле, Сообщение.ПутьКДанным);
			КонецЕсли;

		КонецЦикла;

	Иначе

		Индикатор = 100; // Задание выполнено.

	КонецЕсли;

КонецПроцедуры

&НаСервере
// Включает функциональную опцию.
//
// Параметры:
//	ИмяФункциональнойОпции - тип: Строка. Имя константы функциональной опции.
//
Функция СерверныйИнтерфейс_ВключитьФункциональнуюОпцию(ИмяФункциональнойОпции)

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Константы[ИмяФункциональнойОпции].Получить() Тогда
		Константы[ИмяФункциональнойОпции].Установить(Истина);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецФункции

&НаСервере
// Сохраняет обработку в справочнике <Дополнительные отчеты и обработки>.
//
Процедура СерверныйИнтерфейс_СохранитьОбработкуВИнформационнойБазе(ДвоичныеДанные)

	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");

	// Сохраняем обработку в справочнике <Дополнительные отчеты и обработки>,
	// для запуска в фоновом режиме и отображения индикатора в управляемом
	// приложении.
	ОбъектНаСервере.СохранитьОбработкуВСправочникеДополнительныеОтчетыИОбработки(ДвоичныеДанные);

КонецПроцедуры

&НаСервере
Процедура СерверныйИнтерфейс_СохранитьКонтекстВнешнейОбработки()
	
	КонтекстВнешнейОбработки = Новый Структура();
	КонтекстВнешнейОбработки.Вставить("ОбрабатыватьТабличныеЧасти",		ОбрабатыватьТабличныеЧасти);
	КонтекстВнешнейОбработки.Вставить("ВыбранноеДействие",				ВыбранноеДействие);
	КонтекстВнешнейОбработки.Вставить("НовоеЗначение",					ЭтаФорма["НовоеЗначение"]);
	КонтекстВнешнейОбработки.Вставить("ВыполнятьВТранзакции",			Объект.ВыполнятьВТранзакции);
	КонтекстВнешнейОбработки.Вставить("ВыполнятьВРежимеЗагрузки",		Объект.ВыполнятьВРежимеЗагрузки);
	КонтекстВнешнейОбработки.Вставить("НеПрерыватьВыполнениеПриОшибке",	Объект.НеПрерыватьВыполнениеПриОшибке);
	КонтекстВнешнейОбработки.Вставить("ТаблицаОтборов",					ТаблицаРезультатаОтбора.Выгрузить());
	КонтекстВнешнейОбработки.Вставить("ТаблицаИзменяемыхРеквизитов",	ТаблицаРеквизиты.Выгрузить(Новый Структура("Изменять", Истина)));
	КонтекстВнешнейОбработки.Вставить("ТекущийОбъектМетаданных",		ТаблицаМетаданных.НайтиСтроки(Новый Структура("ИмяРеквизита", ВыбранноеДействие)));
	
	// В Хранилище значений могут быть помещены только сериализуемые значения.
	ХранилищеЗначенийНастроек = Новый ХранилищеЗначения(КонтекстВнешнейОбработки); // Передаем адрес во временном хранилище.
	ХранилищеОбщихНастроек.Сохранить("f0ca0412-1981-0808-2016-008124580333", "КонтекстВнешнейОбработки", ХранилищеЗначенийНастроек);
	
КонецПроцедуры

&НаСервере
// Обработка данных в фоновом (асинхронном) режиме.
//
Функция СерверныйИнтерфейс_ЗапуститьОбработкуВФоновомРежиме(ИдентификаторФоновогоЗадания)

	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");

	СозданоФоновоеЗадание = ОбъектНаСервере.ЗапуститьОбработкуВФоновомРежиме(ИдентификаторФоновогоЗадания);
	
	Возврат СозданоФоновоеЗадание;
	
КонецФункции

&НаСервере
// Возвращает имя файла обработки.
// 
Функция СерверныйИнтерфейс_ПолучитьИмяФайлаОбработки()

	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");

	Возврат ОбъектНаСервере.ИспользуемоеИмяФайла;

КонецФункции

&НаКлиенте
// Получаем сообщения от фонового задания и текущее значение индикатора.
// После завершения задания отключаем обработчик ожидания.
//
Процедура ОжиданиеПроцессаОбработкиДанных()

	СерверныйИнтерфейс_ПолучитьТекущееЗначениеИндикатора(ИдентификаторФоновогоЗадания, Объект.ИндикаторПроцессаОбработкиДанных);

	Если Объект.ИндикаторПроцессаОбработкиДанных = 100 Тогда

		ОтключитьОбработчикОжидания("ОжиданиеПроцессаОбработкиДанных");

		СерверныйИнтерфейс_ОбновитьПослеВыполнения();
		
		Элементы.ИндикаторПроцессаОбработкиДанных.Видимость = Ложь;
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область Конвертация_параметров_СКД_в_параметры_запроса

&НаСервере
Функция ПолучитьУсловияИПараметрыЗапроса(ИмяТипаОбъекта)
	
	УсловияВЗапросе  = "";
	ПараметрыЗапроса = Новый Структура();
	
	Отборы = Объект.Компоновщик.Настройки.Отбор;
	
	ИндексПараметра = 1;
	Для Каждого ВыражениеОтбора Из Отборы.Элементы Цикл
		
		Если ТипЗнч(ВыражениеОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ВыражениеОтбора.Использование Тогда
				
				ИмяПараметра = "Параметр_" + ИндексПараметра;
				
				ЛевоеЗначение = Строка(ВыражениеОтбора.ЛевоеЗначение); // Например: "Ссылка.Дата"
				
				ВидСравненияВЗапросе = ПолучитьВидСравненияДляЗапроса(ВыражениеОтбора.ВидСравнения);
				Если НЕ ПустаяСтрока(ВидСравненияВЗапросе) Тогда
					
					// Например: "Ссылка.Дата >= &Параметр_1"
					НовоеУсловие = ЛевоеЗначение + " " + ВидСравненияВЗапросе + " &" + ИмяПараметра;
					
					УсловияВЗапросе = ?(ПустаяСтрока(УсловияВЗапросе), НовоеУсловие, УсловияВЗапросе + " И " + НовоеУсловие);
					
					ПравоеЗначение = ВыражениеОтбора.ПравоеЗначение;
					Если ТипЗнч(ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
						ПравоеЗначение = ПравоеЗначение.Дата;
					КонецЕсли;
					
					ПараметрыЗапроса.Вставить(ИмяПараметра, ПравоеЗначение);
					
					ИндексПараметра = ИндексПараметра + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ВыражениеОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ВыражениеОтбора.Использование Тогда
				
				ЛогическоеВыражение = ПолучитьЛогическоеВыражение(ВыражениеОтбора.ТипГруппы);
				
				Для Каждого ВыражениеОтбора Из ВыражениеОтбора.Элементы Цикл
					
					Если ТипЗнч(ВыражениеОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
						
						Если ВыражениеОтбора.Использование Тогда
							
							ИмяПараметра = "Параметр_" + ИндексПараметра;
							
							ЛевоеЗначение = Строка(ВыражениеОтбора.ЛевоеЗначение); // Например: "Ссылка.Дата"
							
							ВидСравненияВЗапросе = ПолучитьВидСравненияДляЗапроса(ВыражениеОтбора.ВидСравнения);
							Если НЕ ПустаяСтрока(ВидСравненияВЗапросе) Тогда
								
								Если СокрЛП(ВидСравненияВЗапросе) = "В" ИЛИ СокрЛП(ВидСравненияВЗапросе) = "НЕ В" Тогда
									НовоеУсловие = ЛевоеЗначение + " " + ВидСравненияВЗапросе + "(&" + ИмяПараметра + ")";	// Например: "Ссылка.Организация В (&Параметр_N)"
								Иначе
									НовоеУсловие = ЛевоеЗначение + " " + ВидСравненияВЗапросе + "&" + ИмяПараметра;			// Например: "Ссылка.Дата >= &Параметр_N"
								КонецЕсли;
								
								УсловияВЗапросе = ?(ПустаяСтрока(УсловияВЗапросе), НовоеУсловие, УсловияВЗапросе + " " + ЛогическоеВыражение + " " + НовоеУсловие);
								
								ПравоеЗначение = ВыражениеОтбора.ПравоеЗначение;
								Если ТипЗнч(ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
									ПравоеЗначение = ПравоеЗначение.Дата;
								КонецЕсли;
								
								ПараметрыЗапроса.Вставить(ИмяПараметра, ПравоеЗначение);
								
								ИндексПараметра = ИндексПараметра + 1;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Группируем, например: "(Ссылка.Дата >= &Параметр_1" ИЛИ Ссылка.Организация = &Параметр_2)"
				УсловияВЗапросе = ?(ПустаяСтрока(УсловияВЗапросе), "", " (" + УсловияВЗапросе + ")" );
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УсловияИПараметрыЗапроса = Новый Соответствие();
	УсловияИПараметрыЗапроса.Вставить("УсловияВЗапросе",  УсловияВЗапросе);
	УсловияИПараметрыЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат УсловияИПараметрыЗапроса;
	
КонецФункции // ПолучитьУсловияИПараметрыЗапроса()

&НаСервере
// Возвращает строковое логическое выражение для типа группы СКД.
//
// Параметры:
//	ТипГруппы - тип: ТипГруппыЭлементовОтбораКомпоновкиДанных
//
// Возвращаемое значение:
//	ЛогическоеВыражение - тип: Строка
//
Функция ПолучитьЛогическоеВыражение(ТипГруппы)
	
	ЛогическоеВыражение = "И";
	
	Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		ЛогическоеВыражение = "И";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		ЛогическоеВыражение = "ИЛИ";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		ЛогическоеВыражение = "НЕ";
	КонецЕсли;
	
	Возврат ЛогическоеВыражение;
	
КонецФункции

&НаСервере
// Возвращает строковый вид сравнения для вида сравнения СКД.
//
// Параметры:
//	ВидСравненияКомпоновщика - тип: ВидСравненияКомпоновкиДанных
//
// Возвращаемое значение:
//	ВидСравненияВЗапросе - тип: Строка
//
Функция ПолучитьВидСравненияДляЗапроса(ВидСравненияКомпоновщика)
	
	ВидСравненияВЗапросе = "";
	
	Если ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.Равно Тогда
		
		ВидСравненияВЗапросе = "=";
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.НеРавно Тогда 
		
		ВидСравненияВЗапросе = "<>";
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.Меньше Тогда
		
		ВидСравненияВЗапросе = "<";
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		
		ВидСравненияВЗапросе = "<=";
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.Больше Тогда
		
		ВидСравненияВЗапросе = ">";	
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		
		ВидСравненияВЗапросе = ">=";
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		
		ВидСравненияВЗапросе = "В";
		
	ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		
		ВидСравненияВЗапросе = "НЕ В";
		
	//ИначеЕсли ВидСравненияКомпоновщика = ВидСравненияКомпоновкиДанных.Содержит Тогда
	//	
	//	ВидСравненияВЗапросе = "ПОДОБНО";
		
	КонецЕсли;
	
	Возврат ВидСравненияВЗапросе;
	
КонецФункции

#КонецОбласти


#Область Работа_с_Метаданными

&НаСервере
// Возвращает имя типа объекта, которые могут использоваться в запросах.
//
// Параметры:
//	ОбъектМетаданных - тип: ОбъектМетаданных
//
// Возвращаемое значение:
//	ИмяТипаОбъекта - тип: Строка
//
Функция ПолучитьИмяТипаОбъекта(ОбъектМетаданных)
	
	ИмяТипаОбъекта = "";
	
	Если ЭтоСправочник(ОбъектМетаданных) Тогда
			
		ИмяТипаОбъекта = "Справочник";
		
	ИначеЕсли ЭтоДокумент(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "Документ";
		
	ИначеЕсли ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "РегистрСведений";
		
	ИначеЕсли ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "РегистрНакопления";
		
	ИначеЕсли ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "РегистрБухгалтерии";
		
	ИначеЕсли ЭтоРегистрРасчета(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "РегистрРасчета";
		
	ИначеЕсли ЭтоКонстанта(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "Константа";
		
	ИначеЕсли ЭтоЗадача(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "Задача";
		
	ИначеЕсли ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "БизнесПроцесс";
		
	ИначеЕсли ЭтоПланСчетов(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "ПланСчетов";
		
	ИначеЕсли ЭтоПланВидовРасчета(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "ПланВидовРасчета";
		
	ИначеЕсли ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "ПланВидовХарактеристик";
		
	ИначеЕсли ЭтоПланОбмена(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "ПланОбмена";
		
	ИначеЕсли ЭтоПеречисление(ОбъектМетаданных) Тогда
		
		ИмяТипаОбъекта = "Перечисление";
		
	ИначеЕсли ЭтоЖурналДокументов(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "ЖурналДокументов";
		
	ИначеЕсли ЭтоПоследовательность(ОбъектМетаданных) Тогда 
		
		ИмяТипаОбъекта = "Последовательность";
	
	КонецЕсли;
	
	Возврат ИмяТипаОбъекта;
	
КонецФункции

#Область Ссылочные_типы_данных

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Документ".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Справочник".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Перечисление".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПеречисление(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Перечисления.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "План обмена".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Бизнес-процесс".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Задача".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Задачи.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "План счетов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "План видов расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область Регистры

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Регистр сведений".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Регистр накопления".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Регистр бухгалтерии".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Регистр расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область Прочие_объекты_Метаданных

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Константа".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Константы.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Журнал документов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоЖурналДокументов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Последовательности".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоПоследовательность(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Последовательности.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к общему типу "Регламентные задания".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоРегламентноеЗадание(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к типу регистр.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоРегистр(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
		
КонецФункции

&НаСервере
// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
	
	Если Позиция > 0 Тогда 
		
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		
		Возврат ИмяБазовогоТипа = "Справочник"
			ИЛИ ИмяБазовогоТипа = "Документ"
			ИЛИ ИмяБазовогоТипа = "БизнесПроцесс"
			ИЛИ ИмяБазовогоТипа = "Задача"
			ИЛИ ИмяБазовогоТипа = "ПланСчетов"
			ИЛИ ИмяБазовогоТипа = "ПланОбмена"
			ИЛИ ИмяБазовогоТипа = "ПланВидовХарактеристик"
			ИЛИ ИмяБазовогоТипа = "ПланВидовРасчета";
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область Дополнительные_процедуры_и_функции

&НаКлиенте
// Устанавливает ограничение типов элементов.
Процедура УстановитьОграничениеТипов(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизиты.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Элемент.ПодчиненныеЭлементы.ТаблицаРеквизитыНовоеЗначение.ОграничениеТипа = ТекущиеДанные.ДоступныеТипыЗначений;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Устанавливает заголовок группы ГруппаРезультатОтбораТаблиц.
//
Процедура УстановитьЗаголовокРезультатаОтбора()
	
	Элементы.ГруппаРезультатОтбораТаблиц.Заголовок = "Результат отбора (" + СерверныйИнтерфейс_ПолучитьКоличествоОтобранныхОбъектов() + ")";
	
КонецПроцедуры

&НаКлиенте
// Управляет видимостью элементов.
//
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ИндикаторПроцессаОбработкиДанных.Видимость = Ложь;
	
	Для Каждого Колонка Из Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы Цикл
		
		Если  Колонка.Имя <> "Ссылка" 
			И Колонка.Имя <> "НомерСтроки"
			И Колонка.Имя <> "ТаблицаРезультатаОтбораОбработанУспешно"
			И Колонка.Имя <> "ИмяТЧ" Тогда
			
			Колонка.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РекурсивныйОбходОтбора(Объект.Компоновщик.Настройки.Отбор.Элементы);
	
	Если ВыбранноеДействие = "ИзменитьПометкаУдаления" Тогда
		
		Колонка = Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти("ПометкаУдаления");
		
		Если НЕ Колонка = Неопределено Тогда
			Колонка.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли ВыбранноеДействие = "ИзменитьПроведение" Тогда
		
		Колонка = Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти("Проведен");
		
		Если НЕ Колонка = Неопределено Тогда
			Колонка.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли ВыбранноеДействие = "ВыполнитьЗадачу"  Тогда
		
		Колонка = Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти("Выполнена");
		
		Если НЕ Колонка = Неопределено Тогда
			Колонка.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли ВыбранноеДействие = "Старт"  Тогда
		
		Колонка = Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти("Стартован");
		
		Если НЕ Колонка = Неопределено Тогда
			Колонка.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяРеквизита", ВыбранноеДействие);
		НайденноеЗначение = ТаблицаМетаданных.НайтиСтроки(Отбор);
		
		Если НайденноеЗначение.Количество() > 0 Тогда
			
			НайденноеЗначение = НайденноеЗначение.ПОлучить(0).ИмяРеквизита;
			
			Колонка = Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти(НайденноеЗначение);
			
			Если НЕ Колонка = Неопределено Тогда
				Колонка.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВыбранноеДействие = "ИзменитьРеквизиты" Тогда
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Ложь;
	Иначе
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаКлиенте
// Выполняет рекурсивный обход элементов.
//
Процедура РекурсивныйОбходОтбора(ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если НЕ ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
		   И ЭлементОтбора.Использование = Истина Тогда
			
			Колонка = Элементы.ТаблицаРезультатаОтбораПрограммно.ПодчиненныеЭлементы.Найти(Строка(ЭлементОтбора.ЛевоеЗначение));
			
			Если НЕ Колонка = Неопределено Тогда
				Колонка.Видимость = Истина;
			КонецЕсли;
			
		ИначеЕсли НЕ ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
				И ЭлементОтбора.Использование = Истина Тогда
			
			РекурсивныйОбходОтбора(ЭлементОтбора.Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает массив недопустимых типов.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	МассивНедопустимыхТипов - тип: Массив
//
Функция ПолучитьНедопустимыеТипы()
			
	МассивНедопустимыхТипов = Новый Массив();
	МассивНедопустимыхТипов.Добавить(Тип("ХранилищеЗначения"));
		
	Возврат МассивНедопустимыхТипов;
		
КонецФункции

&НаСервереБезКонтекста
// Для внутреннего использования.
//
// Параметры:
//	ИмяСобытия	- тип: Строка
//	Комментарий	- тип: Любой, приводимый к строке.
//
Процедура ДобавитьИнформациюВЖурналРегистрации(ИмяСобытия, Комментарий = Неопределено)

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,, Строка(Комментарий));  

КонецПроцедуры

&НаСервереБезКонтекста
// Для внутреннего использования.
//
// Параметры:
//	ИмяСобытия	- тип: Строка
//	Комментарий	- тип: Любой, приводимый к строке.
//
Процедура ДобавитьОшибкуВЖурналРегистрации(ИмяСобытия, Комментарий = Неопределено)

	ДанныеОбОшибке = ИнформацияОбОшибке();

	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ДанныеОбОшибке);
	КраткаяИнформация	= КраткоеПредставлениеОшибки(ДанныеОбОшибке);

	Если НЕ ПустаяСтрока(ПодробнаяИнформация) Тогда
		
		ИнформацияОбОшибке = ПодробнаяИнформация;
		
	ИначеЕсли НЕ ПустаяСтрока(КраткаяИнформация) Тогда
		
		ИнформацияОбОшибке = КраткаяИнформация;
		
	ИначеЕсли НЕ ПустаяСтрока(Комментарий) Тогда
		
		ИнформацияОбОшибке = Строка(Комментарий);
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ИнформацияОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует и выводит сообщение, которое может быть связано
// с элементом управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),, "ПолеВРеквизитеФормыОбъект", "Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),, "Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),, "ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",, Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"), Ссылка,,, Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(	Знач ТекстСообщенияПользователю,
								Знач КлючДанных = Неопределено,
								Знач Поле = "",
								Знач ПутьКДанным = "",
								Отказ = Ложь)

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле  = Поле;

	ЭтоОбъект = Ложь;

#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда

	Если НЕ КлючДанных = Неопределено
	   И НЕ XMLТипЗнч(КлючДанных) = Неопределено Тогда

		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;

	КонецЕсли;

#КонецЕсли

	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	Сообщение.Сообщить();

	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область Групповая_печать_справочников_и_документов

Процедура СформироватьПечатныеФормыОбъектов()
	
	// Функционал в разработке.
	
КонецПроцедуры

Процедура ОтправитьПечатныеФормыНаПечать()
	
	// Функционал в разработке.
	
КонецПроцедуры

#КонецОбласти
